// Beacon Chain DNA definitions (data).
syntax = "proto3";

package beaconchain.v2;

import "google/protobuf/timestamp.proto";
import "common.proto";

// Requested data, grouped by block.
message Block {
  // The header.
  BlockHeader header = 1;
  // List of transactions.
  repeated Transaction transactions = 2;
  // List of validators.
  repeated Validator validators = 3;
  // List of blobs.
  repeated Blob blobs = 4;
}

message BlockHeader {
  uint64 slot = 1;
  uint32 proposer_index = 2;
  B256 parent_root = 3;
  B256 state_root = 4;
  bytes randao_reveal = 5;
  uint64 deposit_count = 6;
  B256 deposit_root = 7;
  B256 block_hash = 8;
  B256 graffiti = 9;
  ExecutionPayload execution_payload = 10;
  repeated B384 blob_kzg_commitments = 11;
}

message Transaction {
  // Transaction hash.
  B256 hash = 1;
  // Nonce.
  uint64 nonce = 2;
  // Transaction index in the block.
  uint64 transaction_index = 3;
  // Sender.
  Address from = 4;
  // Recipient.
  Address to = 5;
  // Amount of wei transferred.
  U256 value = 6;
  // Gas price.
  U128 gas_price = 7;
  // Gas amount.
  U256 gas = 8;
  // Max base fee per gas the sender is willing to pay.
  U128 max_fee_per_gas = 9;
  // Miner's tip.
  U128 max_priority_fee_per_gas = 10;
  // Data.
  bytes input = 11;
  // The signature's r,s,v,yParity values.
  Signature signature = 12;
  // Chain ID.
  uint64 chain_id = 13;
  // EIP-2930 access list.
  repeated AccessListItem access_list = 14;
  // EIP-2718 transaction type.
  uint64 transaction_type = 15;
  // EIP-4844 max gas fee per blob.
  U128 max_fee_per_blob_gas = 16;
  // EIP-4844 blob hashes.
  repeated B256 blob_versioned_hashes = 17;
}

message Validator {
  uint32 validator_index = 1;
  uint64 balance = 2;
  ValidatorStatus status = 3;
  B384 pubkey = 4;
  B256 withdrawal_credentials = 5;
  uint64 effective_balance = 6;
  bool slashed = 7;
  uint64 activation_eligibility_epoch = 8;
  uint64 activation_epoch = 9;
  uint64 exit_epoch = 10;
  uint64 withdrawable_epoch = 11;
}

message Blob {
  // Blob index in the block.
  uint32 blob_index = 1;
  // Blob data.
  bytes blob = 2;
  // KZG commitment.
  B384 kzg_commitment = 3;
  // KZG proof.
  B384 kzg_proof = 4;
  // KZG commitment inclusion proof.
  repeated B256 kzg_commitment_inclusion_proof = 5;
  // Blob hash.
  B256 blob_hash = 6;
}

message ExecutionPayload {
  // Parent block hash.
  B256 parent_hash = 1;
  // Address of the fee recipient.
  Address fee_recipient = 2;
  // State root.
  B256 state_root = 3;
  // Receipts root.
  B256 receipts_root = 4;
  // Logs bloom.
  bytes logs_bloom = 5;
  // Previous RANDAO.
  B256 prev_randao = 6;
  // Block number.
  uint64 block_number = 7;
  // Block timestamp.
  google.protobuf.Timestamp timestamp = 8;
}

message Signature {
  // The signature's r value.
  U256 r = 1;
  // The signature's s value.
  U256 s = 2;
  // The signature's v value.
  U256 v = 3;
  // The signature's parity byte.
  bool y_parity = 4;
}

message AccessListItem {
  // Account address to be loaded at the start of the transaction.
  Address address = 1;
  // Storage keys to be loaded at the start of the transaction.
  repeated B256 storage_keys = 2;
}
