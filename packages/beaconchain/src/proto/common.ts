// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: common.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "beaconchain.v2";

/** Validator status */
export enum ValidatorStatus {
  UNKNOWN = 0,
  PENDING_INITIALIZED = 1,
  PENDING_QUEUED = 2,
  ACTIVE_ONGOING = 3,
  ACTIVE_EXITING = 4,
  ACTIVE_SLASHED = 5,
  EXITED_UNSLASHED = 6,
  EXITED_SLASHED = 7,
  WITHDRAWAL_POSSIBLE = 8,
  WITHDRAWAL_DONE = 9,
  UNRECOGNIZED = -1,
}

export function validatorStatusFromJSON(object: any): ValidatorStatus {
  switch (object) {
    case 0:
    case "VALIDATOR_STATUS_UNKNOWN":
      return ValidatorStatus.UNKNOWN;
    case 1:
    case "VALIDATOR_STATUS_PENDING_INITIALIZED":
      return ValidatorStatus.PENDING_INITIALIZED;
    case 2:
    case "VALIDATOR_STATUS_PENDING_QUEUED":
      return ValidatorStatus.PENDING_QUEUED;
    case 3:
    case "VALIDATOR_STATUS_ACTIVE_ONGOING":
      return ValidatorStatus.ACTIVE_ONGOING;
    case 4:
    case "VALIDATOR_STATUS_ACTIVE_EXITING":
      return ValidatorStatus.ACTIVE_EXITING;
    case 5:
    case "VALIDATOR_STATUS_ACTIVE_SLASHED":
      return ValidatorStatus.ACTIVE_SLASHED;
    case 6:
    case "VALIDATOR_STATUS_EXITED_UNSLASHED":
      return ValidatorStatus.EXITED_UNSLASHED;
    case 7:
    case "VALIDATOR_STATUS_EXITED_SLASHED":
      return ValidatorStatus.EXITED_SLASHED;
    case 8:
    case "VALIDATOR_STATUS_WITHDRAWAL_POSSIBLE":
      return ValidatorStatus.WITHDRAWAL_POSSIBLE;
    case 9:
    case "VALIDATOR_STATUS_WITHDRAWAL_DONE":
      return ValidatorStatus.WITHDRAWAL_DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ValidatorStatus.UNRECOGNIZED;
  }
}

export function validatorStatusToJSON(object: ValidatorStatus): string {
  switch (object) {
    case ValidatorStatus.UNKNOWN:
      return "VALIDATOR_STATUS_UNKNOWN";
    case ValidatorStatus.PENDING_INITIALIZED:
      return "VALIDATOR_STATUS_PENDING_INITIALIZED";
    case ValidatorStatus.PENDING_QUEUED:
      return "VALIDATOR_STATUS_PENDING_QUEUED";
    case ValidatorStatus.ACTIVE_ONGOING:
      return "VALIDATOR_STATUS_ACTIVE_ONGOING";
    case ValidatorStatus.ACTIVE_EXITING:
      return "VALIDATOR_STATUS_ACTIVE_EXITING";
    case ValidatorStatus.ACTIVE_SLASHED:
      return "VALIDATOR_STATUS_ACTIVE_SLASHED";
    case ValidatorStatus.EXITED_UNSLASHED:
      return "VALIDATOR_STATUS_EXITED_UNSLASHED";
    case ValidatorStatus.EXITED_SLASHED:
      return "VALIDATOR_STATUS_EXITED_SLASHED";
    case ValidatorStatus.WITHDRAWAL_POSSIBLE:
      return "VALIDATOR_STATUS_WITHDRAWAL_POSSIBLE";
    case ValidatorStatus.WITHDRAWAL_DONE:
      return "VALIDATOR_STATUS_WITHDRAWAL_DONE";
    case ValidatorStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * An address of 160 bits.
 *
 * As a separate type so that the API is clearer.
 */
export interface Address {
  readonly x0?: bigint | undefined;
  readonly x1?: bigint | undefined;
  readonly x2?: number | undefined;
}

/** Unsigned integer of 256 bits. */
export interface U256 {
  readonly x0?: bigint | undefined;
  readonly x1?: bigint | undefined;
  readonly x2?: bigint | undefined;
  readonly x3?: bigint | undefined;
}

/** Byte array of 256 bits. */
export interface B256 {
  readonly x0?: bigint | undefined;
  readonly x1?: bigint | undefined;
  readonly x2?: bigint | undefined;
  readonly x3?: bigint | undefined;
}

/** Byte array of 384 bits. */
export interface B384 {
  readonly x0?: bigint | undefined;
  readonly x1?: bigint | undefined;
  readonly x2?: bigint | undefined;
  readonly x3?: bigint | undefined;
  readonly x4?: bigint | undefined;
  readonly x5?: bigint | undefined;
}

/** Unsigned integer of 128 bits. */
export interface U128 {
  readonly x0?: bigint | undefined;
  readonly x1?: bigint | undefined;
}

function createBaseAddress(): Address {
  return { x0: BigInt("0"), x1: BigInt("0"), x2: 0 };
}

export const Address = {
  encode(message: Address, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x0) !== message.x0) {
        throw new globalThis.Error("value provided for field message.x0 of type fixed64 too large");
      }
      writer.uint32(9).fixed64(message.x0.toString());
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x1) !== message.x1) {
        throw new globalThis.Error("value provided for field message.x1 of type fixed64 too large");
      }
      writer.uint32(17).fixed64(message.x1.toString());
    }
    if (message.x2 !== undefined && message.x2 !== 0) {
      writer.uint32(29).fixed32(message.x2);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Address {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddress() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x0 = longToBigint(reader.fixed64() as Long);
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.x1 = longToBigint(reader.fixed64() as Long);
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.x2 = reader.fixed32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Address {
    return {
      x0: isSet(object.x0) ? BigInt(object.x0) : BigInt("0"),
      x1: isSet(object.x1) ? BigInt(object.x1) : BigInt("0"),
      x2: isSet(object.x2) ? globalThis.Number(object.x2) : 0,
    };
  },

  toJSON(message: Address): unknown {
    const obj: any = {};
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      obj.x0 = message.x0.toString();
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      obj.x1 = message.x1.toString();
    }
    if (message.x2 !== undefined && message.x2 !== 0) {
      obj.x2 = Math.round(message.x2);
    }
    return obj;
  },

  create(base?: DeepPartial<Address>): Address {
    return Address.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Address>): Address {
    const message = createBaseAddress() as any;
    message.x0 = object.x0 ?? BigInt("0");
    message.x1 = object.x1 ?? BigInt("0");
    message.x2 = object.x2 ?? 0;
    return message;
  },
};

function createBaseU256(): U256 {
  return { x0: BigInt("0"), x1: BigInt("0"), x2: BigInt("0"), x3: BigInt("0") };
}

export const U256 = {
  encode(message: U256, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x0) !== message.x0) {
        throw new globalThis.Error("value provided for field message.x0 of type fixed64 too large");
      }
      writer.uint32(9).fixed64(message.x0.toString());
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x1) !== message.x1) {
        throw new globalThis.Error("value provided for field message.x1 of type fixed64 too large");
      }
      writer.uint32(17).fixed64(message.x1.toString());
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x2) !== message.x2) {
        throw new globalThis.Error("value provided for field message.x2 of type fixed64 too large");
      }
      writer.uint32(25).fixed64(message.x2.toString());
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x3) !== message.x3) {
        throw new globalThis.Error("value provided for field message.x3 of type fixed64 too large");
      }
      writer.uint32(33).fixed64(message.x3.toString());
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): U256 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseU256() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x0 = longToBigint(reader.fixed64() as Long);
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.x1 = longToBigint(reader.fixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.x2 = longToBigint(reader.fixed64() as Long);
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.x3 = longToBigint(reader.fixed64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): U256 {
    return {
      x0: isSet(object.x0) ? BigInt(object.x0) : BigInt("0"),
      x1: isSet(object.x1) ? BigInt(object.x1) : BigInt("0"),
      x2: isSet(object.x2) ? BigInt(object.x2) : BigInt("0"),
      x3: isSet(object.x3) ? BigInt(object.x3) : BigInt("0"),
    };
  },

  toJSON(message: U256): unknown {
    const obj: any = {};
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      obj.x0 = message.x0.toString();
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      obj.x1 = message.x1.toString();
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      obj.x2 = message.x2.toString();
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      obj.x3 = message.x3.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<U256>): U256 {
    return U256.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<U256>): U256 {
    const message = createBaseU256() as any;
    message.x0 = object.x0 ?? BigInt("0");
    message.x1 = object.x1 ?? BigInt("0");
    message.x2 = object.x2 ?? BigInt("0");
    message.x3 = object.x3 ?? BigInt("0");
    return message;
  },
};

function createBaseB256(): B256 {
  return { x0: BigInt("0"), x1: BigInt("0"), x2: BigInt("0"), x3: BigInt("0") };
}

export const B256 = {
  encode(message: B256, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x0) !== message.x0) {
        throw new globalThis.Error("value provided for field message.x0 of type fixed64 too large");
      }
      writer.uint32(9).fixed64(message.x0.toString());
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x1) !== message.x1) {
        throw new globalThis.Error("value provided for field message.x1 of type fixed64 too large");
      }
      writer.uint32(17).fixed64(message.x1.toString());
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x2) !== message.x2) {
        throw new globalThis.Error("value provided for field message.x2 of type fixed64 too large");
      }
      writer.uint32(25).fixed64(message.x2.toString());
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x3) !== message.x3) {
        throw new globalThis.Error("value provided for field message.x3 of type fixed64 too large");
      }
      writer.uint32(33).fixed64(message.x3.toString());
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): B256 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseB256() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x0 = longToBigint(reader.fixed64() as Long);
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.x1 = longToBigint(reader.fixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.x2 = longToBigint(reader.fixed64() as Long);
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.x3 = longToBigint(reader.fixed64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): B256 {
    return {
      x0: isSet(object.x0) ? BigInt(object.x0) : BigInt("0"),
      x1: isSet(object.x1) ? BigInt(object.x1) : BigInt("0"),
      x2: isSet(object.x2) ? BigInt(object.x2) : BigInt("0"),
      x3: isSet(object.x3) ? BigInt(object.x3) : BigInt("0"),
    };
  },

  toJSON(message: B256): unknown {
    const obj: any = {};
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      obj.x0 = message.x0.toString();
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      obj.x1 = message.x1.toString();
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      obj.x2 = message.x2.toString();
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      obj.x3 = message.x3.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<B256>): B256 {
    return B256.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<B256>): B256 {
    const message = createBaseB256() as any;
    message.x0 = object.x0 ?? BigInt("0");
    message.x1 = object.x1 ?? BigInt("0");
    message.x2 = object.x2 ?? BigInt("0");
    message.x3 = object.x3 ?? BigInt("0");
    return message;
  },
};

function createBaseB384(): B384 {
  return { x0: BigInt("0"), x1: BigInt("0"), x2: BigInt("0"), x3: BigInt("0"), x4: BigInt("0"), x5: BigInt("0") };
}

export const B384 = {
  encode(message: B384, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x0) !== message.x0) {
        throw new globalThis.Error("value provided for field message.x0 of type fixed64 too large");
      }
      writer.uint32(9).fixed64(message.x0.toString());
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x1) !== message.x1) {
        throw new globalThis.Error("value provided for field message.x1 of type fixed64 too large");
      }
      writer.uint32(17).fixed64(message.x1.toString());
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x2) !== message.x2) {
        throw new globalThis.Error("value provided for field message.x2 of type fixed64 too large");
      }
      writer.uint32(25).fixed64(message.x2.toString());
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x3) !== message.x3) {
        throw new globalThis.Error("value provided for field message.x3 of type fixed64 too large");
      }
      writer.uint32(33).fixed64(message.x3.toString());
    }
    if (message.x4 !== undefined && message.x4 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x4) !== message.x4) {
        throw new globalThis.Error("value provided for field message.x4 of type fixed64 too large");
      }
      writer.uint32(41).fixed64(message.x4.toString());
    }
    if (message.x5 !== undefined && message.x5 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x5) !== message.x5) {
        throw new globalThis.Error("value provided for field message.x5 of type fixed64 too large");
      }
      writer.uint32(49).fixed64(message.x5.toString());
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): B384 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseB384() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x0 = longToBigint(reader.fixed64() as Long);
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.x1 = longToBigint(reader.fixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.x2 = longToBigint(reader.fixed64() as Long);
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.x3 = longToBigint(reader.fixed64() as Long);
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.x4 = longToBigint(reader.fixed64() as Long);
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.x5 = longToBigint(reader.fixed64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): B384 {
    return {
      x0: isSet(object.x0) ? BigInt(object.x0) : BigInt("0"),
      x1: isSet(object.x1) ? BigInt(object.x1) : BigInt("0"),
      x2: isSet(object.x2) ? BigInt(object.x2) : BigInt("0"),
      x3: isSet(object.x3) ? BigInt(object.x3) : BigInt("0"),
      x4: isSet(object.x4) ? BigInt(object.x4) : BigInt("0"),
      x5: isSet(object.x5) ? BigInt(object.x5) : BigInt("0"),
    };
  },

  toJSON(message: B384): unknown {
    const obj: any = {};
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      obj.x0 = message.x0.toString();
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      obj.x1 = message.x1.toString();
    }
    if (message.x2 !== undefined && message.x2 !== BigInt("0")) {
      obj.x2 = message.x2.toString();
    }
    if (message.x3 !== undefined && message.x3 !== BigInt("0")) {
      obj.x3 = message.x3.toString();
    }
    if (message.x4 !== undefined && message.x4 !== BigInt("0")) {
      obj.x4 = message.x4.toString();
    }
    if (message.x5 !== undefined && message.x5 !== BigInt("0")) {
      obj.x5 = message.x5.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<B384>): B384 {
    return B384.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<B384>): B384 {
    const message = createBaseB384() as any;
    message.x0 = object.x0 ?? BigInt("0");
    message.x1 = object.x1 ?? BigInt("0");
    message.x2 = object.x2 ?? BigInt("0");
    message.x3 = object.x3 ?? BigInt("0");
    message.x4 = object.x4 ?? BigInt("0");
    message.x5 = object.x5 ?? BigInt("0");
    return message;
  },
};

function createBaseU128(): U128 {
  return { x0: BigInt("0"), x1: BigInt("0") };
}

export const U128 = {
  encode(message: U128, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x0) !== message.x0) {
        throw new globalThis.Error("value provided for field message.x0 of type fixed64 too large");
      }
      writer.uint32(9).fixed64(message.x0.toString());
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      if (BigInt.asUintN(64, message.x1) !== message.x1) {
        throw new globalThis.Error("value provided for field message.x1 of type fixed64 too large");
      }
      writer.uint32(17).fixed64(message.x1.toString());
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): U128 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseU128() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x0 = longToBigint(reader.fixed64() as Long);
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.x1 = longToBigint(reader.fixed64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): U128 {
    return {
      x0: isSet(object.x0) ? BigInt(object.x0) : BigInt("0"),
      x1: isSet(object.x1) ? BigInt(object.x1) : BigInt("0"),
    };
  },

  toJSON(message: U128): unknown {
    const obj: any = {};
    if (message.x0 !== undefined && message.x0 !== BigInt("0")) {
      obj.x0 = message.x0.toString();
    }
    if (message.x1 !== undefined && message.x1 !== BigInt("0")) {
      obj.x1 = message.x1.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<U128>): U128 {
    return U128.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<U128>): U128 {
    const message = createBaseU128() as any;
    message.x0 = object.x0 ?? BigInt("0");
    message.x1 = object.x1 ?? BigInt("0");
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
