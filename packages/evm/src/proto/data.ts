// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: data.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Address, B256, Bloom, U128, U256 } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "evm.v2";

/** EVM DNA definitions (data). */

/** Requested data, grouped by block. */
export interface Block {
  /** The header. */
  readonly header?:
    | BlockHeader
    | undefined;
  /** List of withdrawals. */
  readonly withdrawals?:
    | readonly Withdrawal[]
    | undefined;
  /** List of transactions. */
  readonly transactions?:
    | readonly Transaction[]
    | undefined;
  /** List of receipts. */
  readonly receipts?:
    | readonly TransactionReceipt[]
    | undefined;
  /** List of logs. */
  readonly logs?: readonly Log[] | undefined;
}

/** Block header. */
export interface BlockHeader {
  /** Block number. */
  readonly number?:
    | bigint
    | undefined;
  /** Hash of the block. */
  readonly hash?:
    | B256
    | undefined;
  /** Hash of the parent block. */
  readonly parentHash?:
    | B256
    | undefined;
  /** Hash of the uncles. */
  readonly unclesHash?:
    | B256
    | undefined;
  /** Author of the block. */
  readonly miner?:
    | Address
    | undefined;
  /** State root hash. */
  readonly stateRoot?:
    | B256
    | undefined;
  /** Transactions root hash. */
  readonly transactionsRoot?:
    | B256
    | undefined;
  /** Receipts root hash. */
  readonly receiptsRoot?:
    | B256
    | undefined;
  /** Logs bloom. */
  readonly logsBloom?:
    | Bloom
    | undefined;
  /** Difficulty. */
  readonly difficulty?:
    | U256
    | undefined;
  /** Gas limit. */
  readonly gasLimit?:
    | U256
    | undefined;
  /** Gas used. */
  readonly gasUsed?:
    | U256
    | undefined;
  /** Timestamp. */
  readonly timestamp?:
    | Date
    | undefined;
  /** Extra data. */
  readonly extraData?:
    | Uint8Array
    | undefined;
  /** Mix hash. */
  readonly mixHash?:
    | B256
    | undefined;
  /** Nonce. */
  readonly nonce?:
    | bigint
    | undefined;
  /** Base fee per unit of gas. */
  readonly baseFeePerGas?:
    | U256
    | undefined;
  /** Withdrawals root hash. */
  readonly withdrawalsRoot?:
    | B256
    | undefined;
  /** Total difficulty. */
  readonly totalDifficulty?:
    | U256
    | undefined;
  /** Uncles' hashes. */
  readonly uncles?:
    | readonly B256[]
    | undefined;
  /** The size of this block in bytes. */
  readonly size?:
    | U256
    | undefined;
  /** Blob gas used. */
  readonly blobGasUsed?:
    | bigint
    | undefined;
  /** Excess blob gas. */
  readonly excessBlobGas?:
    | bigint
    | undefined;
  /** Parent beacon block root. */
  readonly parentBeaconBlockRoot?: B256 | undefined;
}

/** A validator's withdrawal from the consensus layer. */
export interface Withdrawal {
  /** Increasing index of the withdrawal. */
  readonly index?:
    | bigint
    | undefined;
  /** Index of the validator. */
  readonly validatorIndex?:
    | bigint
    | undefined;
  /** Withdrawal index in the block. */
  readonly withdrawalIndex?:
    | bigint
    | undefined;
  /** Target address of the withdrawal. */
  readonly address?:
    | Address
    | undefined;
  /** Value of the withdrawal, in gwei. */
  readonly amount?: U256 | undefined;
}

export interface Transaction {
  /** Transaction hash. */
  readonly hash?:
    | B256
    | undefined;
  /** Nonce. */
  readonly nonce?:
    | bigint
    | undefined;
  /** Transaction index in the block. */
  readonly transactionIndex?:
    | bigint
    | undefined;
  /** Sender. */
  readonly from?:
    | Address
    | undefined;
  /** Recipient. */
  readonly to?:
    | Address
    | undefined;
  /** Amount of wei transferred. */
  readonly value?:
    | U256
    | undefined;
  /** Gas price. */
  readonly gasPrice?:
    | U128
    | undefined;
  /** Gas amount. */
  readonly gas?:
    | U256
    | undefined;
  /** Max base fee per gas the sender is willing to pay. */
  readonly maxFeePerGas?:
    | U128
    | undefined;
  /** Miner's tip. */
  readonly maxPriorityFeePerGas?:
    | U128
    | undefined;
  /** Data. */
  readonly input?:
    | Uint8Array
    | undefined;
  /** The signature's r,s,v,yParity values. */
  readonly signature?:
    | Signature
    | undefined;
  /** Chain ID. */
  readonly chainId?:
    | bigint
    | undefined;
  /** EIP-2930 access list. */
  readonly accessList?:
    | readonly AccessListItem[]
    | undefined;
  /** EIP-2718 transaction type. */
  readonly transactionType?:
    | bigint
    | undefined;
  /** EIP-4844 max gas fee per blob. */
  readonly maxFeePerBlobGas?:
    | U128
    | undefined;
  /** EIP-4844 blob hashes. */
  readonly blobVersionedHashes?: readonly B256[] | undefined;
}

export interface TransactionReceipt {
  /** Transaction hash. */
  readonly transactionHash?:
    | B256
    | undefined;
  /** Index of the transaction in the block. */
  readonly transactionIndex?:
    | bigint
    | undefined;
  /** Cumulative gas used in the block after this transaction has been executed. */
  readonly cumulativeGasUsed?:
    | U256
    | undefined;
  /** Gas used by this transaction. */
  readonly gasUsed?:
    | U256
    | undefined;
  /** The price paid by the transaction. */
  readonly effectiveGasPrice?:
    | U128
    | undefined;
  /** Sender. */
  readonly from?:
    | Address
    | undefined;
  /** Recipient, if any. */
  readonly to?:
    | Address
    | undefined;
  /** Contract address created, if any. */
  readonly contractAddress?:
    | Address
    | undefined;
  /** Logs bloom. */
  readonly logsBloom?:
    | Bloom
    | undefined;
  /** Either 1 (success) or 0 (failure). */
  readonly statusCode?:
    | bigint
    | undefined;
  /** EIP-2718 transaction type. */
  readonly transactionType?:
    | bigint
    | undefined;
  /** EIP-4844 blob gas used. */
  readonly blobGasUsed?:
    | U128
    | undefined;
  /** EIP-4844 blob gas paid by the transaction. */
  readonly blobGasPrice?: U128 | undefined;
}

export interface Log {
  /** Address of the contract that emitted the log. */
  readonly address?:
    | Address
    | undefined;
  /** Log topics. */
  readonly topics?:
    | readonly B256[]
    | undefined;
  /** Additional data. */
  readonly data?:
    | Uint8Array
    | undefined;
  /** Index of the log in the block. */
  readonly logIndex?:
    | bigint
    | undefined;
  /** Index of the transaction that emitted the log. */
  readonly transactionIndex?:
    | bigint
    | undefined;
  /** Hash of the transaction that emitted the log. */
  readonly transactionHash?: B256 | undefined;
}

export interface Signature {
  /** The signature's r value. */
  readonly r?:
    | U256
    | undefined;
  /** The signature's s value. */
  readonly s?:
    | U256
    | undefined;
  /** The signature's v value. */
  readonly v?:
    | U256
    | undefined;
  /** The signature's parity byte. */
  readonly yParity?: boolean | undefined;
}

export interface AccessListItem {
  /** Account address to be loaded at the start of the transaction. */
  readonly address?:
    | Address
    | undefined;
  /** Storage keys to be loaded at the start of the transaction. */
  readonly storageKeys?: readonly B256[] | undefined;
}

function createBaseBlock(): Block {
  return { header: undefined, withdrawals: [], transactions: [], receipts: [], logs: [] };
}

export const Block = {
  encode(message: Block, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      BlockHeader.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    if (message.withdrawals !== undefined && message.withdrawals.length !== 0) {
      for (const v of message.withdrawals) {
        Withdrawal.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    if (message.transactions !== undefined && message.transactions.length !== 0) {
      for (const v of message.transactions) {
        Transaction.encode(v!, writer.uint32(26).fork()).ldelim();
      }
    }
    if (message.receipts !== undefined && message.receipts.length !== 0) {
      for (const v of message.receipts) {
        TransactionReceipt.encode(v!, writer.uint32(34).fork()).ldelim();
      }
    }
    if (message.logs !== undefined && message.logs.length !== 0) {
      for (const v of message.logs) {
        Log.encode(v!, writer.uint32(42).fork()).ldelim();
      }
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Block {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = BlockHeader.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.withdrawals!.push(Withdrawal.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.transactions!.push(Transaction.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.receipts!.push(TransactionReceipt.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.logs!.push(Log.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      header: isSet(object.header) ? BlockHeader.fromJSON(object.header) : undefined,
      withdrawals: globalThis.Array.isArray(object?.withdrawals)
        ? object.withdrawals.map((e: any) => Withdrawal.fromJSON(e))
        : [],
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
      receipts: globalThis.Array.isArray(object?.receipts)
        ? object.receipts.map((e: any) => TransactionReceipt.fromJSON(e))
        : [],
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => Log.fromJSON(e)) : [],
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = BlockHeader.toJSON(message.header);
    }
    if (message.withdrawals?.length) {
      obj.withdrawals = message.withdrawals.map((e) => Withdrawal.toJSON(e));
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    if (message.receipts?.length) {
      obj.receipts = message.receipts.map((e) => TransactionReceipt.toJSON(e));
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => Log.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Block>): Block {
    return Block.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Block>): Block {
    const message = createBaseBlock() as any;
    message.header = (object.header !== undefined && object.header !== null)
      ? BlockHeader.fromPartial(object.header)
      : undefined;
    message.withdrawals = object.withdrawals?.map((e) => Withdrawal.fromPartial(e)) || [];
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    message.receipts = object.receipts?.map((e) => TransactionReceipt.fromPartial(e)) || [];
    message.logs = object.logs?.map((e) => Log.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlockHeader(): BlockHeader {
  return {
    number: BigInt("0"),
    hash: undefined,
    parentHash: undefined,
    unclesHash: undefined,
    miner: undefined,
    stateRoot: undefined,
    transactionsRoot: undefined,
    receiptsRoot: undefined,
    logsBloom: undefined,
    difficulty: undefined,
    gasLimit: undefined,
    gasUsed: undefined,
    timestamp: undefined,
    extraData: new Uint8Array(0),
    mixHash: undefined,
    nonce: BigInt("0"),
    baseFeePerGas: undefined,
    withdrawalsRoot: undefined,
    totalDifficulty: undefined,
    uncles: [],
    size: undefined,
    blobGasUsed: BigInt("0"),
    excessBlobGas: BigInt("0"),
    parentBeaconBlockRoot: undefined,
  };
}

export const BlockHeader = {
  encode(message: BlockHeader, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.number !== undefined && message.number !== BigInt("0")) {
      if (BigInt.asUintN(64, message.number) !== message.number) {
        throw new globalThis.Error("value provided for field message.number of type uint64 too large");
      }
      writer.uint32(8).uint64(message.number.toString());
    }
    if (message.hash !== undefined) {
      B256.encode(message.hash, writer.uint32(18).fork()).ldelim();
    }
    if (message.parentHash !== undefined) {
      B256.encode(message.parentHash, writer.uint32(26).fork()).ldelim();
    }
    if (message.unclesHash !== undefined) {
      B256.encode(message.unclesHash, writer.uint32(34).fork()).ldelim();
    }
    if (message.miner !== undefined) {
      Address.encode(message.miner, writer.uint32(42).fork()).ldelim();
    }
    if (message.stateRoot !== undefined) {
      B256.encode(message.stateRoot, writer.uint32(50).fork()).ldelim();
    }
    if (message.transactionsRoot !== undefined) {
      B256.encode(message.transactionsRoot, writer.uint32(58).fork()).ldelim();
    }
    if (message.receiptsRoot !== undefined) {
      B256.encode(message.receiptsRoot, writer.uint32(66).fork()).ldelim();
    }
    if (message.logsBloom !== undefined) {
      Bloom.encode(message.logsBloom, writer.uint32(74).fork()).ldelim();
    }
    if (message.difficulty !== undefined) {
      U256.encode(message.difficulty, writer.uint32(82).fork()).ldelim();
    }
    if (message.gasLimit !== undefined) {
      U256.encode(message.gasLimit, writer.uint32(90).fork()).ldelim();
    }
    if (message.gasUsed !== undefined) {
      U256.encode(message.gasUsed, writer.uint32(98).fork()).ldelim();
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(106).fork()).ldelim();
    }
    if (message.extraData !== undefined && message.extraData.length !== 0) {
      writer.uint32(114).bytes(message.extraData);
    }
    if (message.mixHash !== undefined) {
      B256.encode(message.mixHash, writer.uint32(122).fork()).ldelim();
    }
    if (message.nonce !== undefined && message.nonce !== BigInt("0")) {
      if (BigInt.asUintN(64, message.nonce) !== message.nonce) {
        throw new globalThis.Error("value provided for field message.nonce of type uint64 too large");
      }
      writer.uint32(128).uint64(message.nonce.toString());
    }
    if (message.baseFeePerGas !== undefined) {
      U256.encode(message.baseFeePerGas, writer.uint32(138).fork()).ldelim();
    }
    if (message.withdrawalsRoot !== undefined) {
      B256.encode(message.withdrawalsRoot, writer.uint32(146).fork()).ldelim();
    }
    if (message.totalDifficulty !== undefined) {
      U256.encode(message.totalDifficulty, writer.uint32(154).fork()).ldelim();
    }
    if (message.uncles !== undefined && message.uncles.length !== 0) {
      for (const v of message.uncles) {
        B256.encode(v!, writer.uint32(162).fork()).ldelim();
      }
    }
    if (message.size !== undefined) {
      U256.encode(message.size, writer.uint32(170).fork()).ldelim();
    }
    if (message.blobGasUsed !== undefined && message.blobGasUsed !== BigInt("0")) {
      if (BigInt.asUintN(64, message.blobGasUsed) !== message.blobGasUsed) {
        throw new globalThis.Error("value provided for field message.blobGasUsed of type uint64 too large");
      }
      writer.uint32(176).uint64(message.blobGasUsed.toString());
    }
    if (message.excessBlobGas !== undefined && message.excessBlobGas !== BigInt("0")) {
      if (BigInt.asUintN(64, message.excessBlobGas) !== message.excessBlobGas) {
        throw new globalThis.Error("value provided for field message.excessBlobGas of type uint64 too large");
      }
      writer.uint32(184).uint64(message.excessBlobGas.toString());
    }
    if (message.parentBeaconBlockRoot !== undefined) {
      B256.encode(message.parentBeaconBlockRoot, writer.uint32(194).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockHeader {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeader() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.number = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = B256.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parentHash = B256.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.unclesHash = B256.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.miner = Address.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.stateRoot = B256.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.transactionsRoot = B256.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.receiptsRoot = B256.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.logsBloom = Bloom.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.difficulty = U256.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.gasLimit = U256.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.gasUsed = U256.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.extraData = reader.bytes();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.mixHash = B256.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.nonce = longToBigint(reader.uint64() as Long);
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.baseFeePerGas = U256.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.withdrawalsRoot = B256.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.totalDifficulty = U256.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.uncles!.push(B256.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.size = U256.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.blobGasUsed = longToBigint(reader.uint64() as Long);
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.excessBlobGas = longToBigint(reader.uint64() as Long);
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.parentBeaconBlockRoot = B256.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeader {
    return {
      number: isSet(object.number) ? BigInt(object.number) : BigInt("0"),
      hash: isSet(object.hash) ? B256.fromJSON(object.hash) : undefined,
      parentHash: isSet(object.parentHash) ? B256.fromJSON(object.parentHash) : undefined,
      unclesHash: isSet(object.unclesHash) ? B256.fromJSON(object.unclesHash) : undefined,
      miner: isSet(object.miner) ? Address.fromJSON(object.miner) : undefined,
      stateRoot: isSet(object.stateRoot) ? B256.fromJSON(object.stateRoot) : undefined,
      transactionsRoot: isSet(object.transactionsRoot) ? B256.fromJSON(object.transactionsRoot) : undefined,
      receiptsRoot: isSet(object.receiptsRoot) ? B256.fromJSON(object.receiptsRoot) : undefined,
      logsBloom: isSet(object.logsBloom) ? Bloom.fromJSON(object.logsBloom) : undefined,
      difficulty: isSet(object.difficulty) ? U256.fromJSON(object.difficulty) : undefined,
      gasLimit: isSet(object.gasLimit) ? U256.fromJSON(object.gasLimit) : undefined,
      gasUsed: isSet(object.gasUsed) ? U256.fromJSON(object.gasUsed) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      extraData: isSet(object.extraData) ? bytesFromBase64(object.extraData) : new Uint8Array(0),
      mixHash: isSet(object.mixHash) ? B256.fromJSON(object.mixHash) : undefined,
      nonce: isSet(object.nonce) ? BigInt(object.nonce) : BigInt("0"),
      baseFeePerGas: isSet(object.baseFeePerGas) ? U256.fromJSON(object.baseFeePerGas) : undefined,
      withdrawalsRoot: isSet(object.withdrawalsRoot) ? B256.fromJSON(object.withdrawalsRoot) : undefined,
      totalDifficulty: isSet(object.totalDifficulty) ? U256.fromJSON(object.totalDifficulty) : undefined,
      uncles: globalThis.Array.isArray(object?.uncles) ? object.uncles.map((e: any) => B256.fromJSON(e)) : [],
      size: isSet(object.size) ? U256.fromJSON(object.size) : undefined,
      blobGasUsed: isSet(object.blobGasUsed) ? BigInt(object.blobGasUsed) : BigInt("0"),
      excessBlobGas: isSet(object.excessBlobGas) ? BigInt(object.excessBlobGas) : BigInt("0"),
      parentBeaconBlockRoot: isSet(object.parentBeaconBlockRoot)
        ? B256.fromJSON(object.parentBeaconBlockRoot)
        : undefined,
    };
  },

  toJSON(message: BlockHeader): unknown {
    const obj: any = {};
    if (message.number !== undefined && message.number !== BigInt("0")) {
      obj.number = message.number.toString();
    }
    if (message.hash !== undefined) {
      obj.hash = B256.toJSON(message.hash);
    }
    if (message.parentHash !== undefined) {
      obj.parentHash = B256.toJSON(message.parentHash);
    }
    if (message.unclesHash !== undefined) {
      obj.unclesHash = B256.toJSON(message.unclesHash);
    }
    if (message.miner !== undefined) {
      obj.miner = Address.toJSON(message.miner);
    }
    if (message.stateRoot !== undefined) {
      obj.stateRoot = B256.toJSON(message.stateRoot);
    }
    if (message.transactionsRoot !== undefined) {
      obj.transactionsRoot = B256.toJSON(message.transactionsRoot);
    }
    if (message.receiptsRoot !== undefined) {
      obj.receiptsRoot = B256.toJSON(message.receiptsRoot);
    }
    if (message.logsBloom !== undefined) {
      obj.logsBloom = Bloom.toJSON(message.logsBloom);
    }
    if (message.difficulty !== undefined) {
      obj.difficulty = U256.toJSON(message.difficulty);
    }
    if (message.gasLimit !== undefined) {
      obj.gasLimit = U256.toJSON(message.gasLimit);
    }
    if (message.gasUsed !== undefined) {
      obj.gasUsed = U256.toJSON(message.gasUsed);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.extraData !== undefined && message.extraData.length !== 0) {
      obj.extraData = base64FromBytes(message.extraData);
    }
    if (message.mixHash !== undefined) {
      obj.mixHash = B256.toJSON(message.mixHash);
    }
    if (message.nonce !== undefined && message.nonce !== BigInt("0")) {
      obj.nonce = message.nonce.toString();
    }
    if (message.baseFeePerGas !== undefined) {
      obj.baseFeePerGas = U256.toJSON(message.baseFeePerGas);
    }
    if (message.withdrawalsRoot !== undefined) {
      obj.withdrawalsRoot = B256.toJSON(message.withdrawalsRoot);
    }
    if (message.totalDifficulty !== undefined) {
      obj.totalDifficulty = U256.toJSON(message.totalDifficulty);
    }
    if (message.uncles?.length) {
      obj.uncles = message.uncles.map((e) => B256.toJSON(e));
    }
    if (message.size !== undefined) {
      obj.size = U256.toJSON(message.size);
    }
    if (message.blobGasUsed !== undefined && message.blobGasUsed !== BigInt("0")) {
      obj.blobGasUsed = message.blobGasUsed.toString();
    }
    if (message.excessBlobGas !== undefined && message.excessBlobGas !== BigInt("0")) {
      obj.excessBlobGas = message.excessBlobGas.toString();
    }
    if (message.parentBeaconBlockRoot !== undefined) {
      obj.parentBeaconBlockRoot = B256.toJSON(message.parentBeaconBlockRoot);
    }
    return obj;
  },

  create(base?: DeepPartial<BlockHeader>): BlockHeader {
    return BlockHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockHeader>): BlockHeader {
    const message = createBaseBlockHeader() as any;
    message.number = object.number ?? BigInt("0");
    message.hash = (object.hash !== undefined && object.hash !== null) ? B256.fromPartial(object.hash) : undefined;
    message.parentHash = (object.parentHash !== undefined && object.parentHash !== null)
      ? B256.fromPartial(object.parentHash)
      : undefined;
    message.unclesHash = (object.unclesHash !== undefined && object.unclesHash !== null)
      ? B256.fromPartial(object.unclesHash)
      : undefined;
    message.miner = (object.miner !== undefined && object.miner !== null)
      ? Address.fromPartial(object.miner)
      : undefined;
    message.stateRoot = (object.stateRoot !== undefined && object.stateRoot !== null)
      ? B256.fromPartial(object.stateRoot)
      : undefined;
    message.transactionsRoot = (object.transactionsRoot !== undefined && object.transactionsRoot !== null)
      ? B256.fromPartial(object.transactionsRoot)
      : undefined;
    message.receiptsRoot = (object.receiptsRoot !== undefined && object.receiptsRoot !== null)
      ? B256.fromPartial(object.receiptsRoot)
      : undefined;
    message.logsBloom = (object.logsBloom !== undefined && object.logsBloom !== null)
      ? Bloom.fromPartial(object.logsBloom)
      : undefined;
    message.difficulty = (object.difficulty !== undefined && object.difficulty !== null)
      ? U256.fromPartial(object.difficulty)
      : undefined;
    message.gasLimit = (object.gasLimit !== undefined && object.gasLimit !== null)
      ? U256.fromPartial(object.gasLimit)
      : undefined;
    message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
      ? U256.fromPartial(object.gasUsed)
      : undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.extraData = object.extraData ?? new Uint8Array(0);
    message.mixHash = (object.mixHash !== undefined && object.mixHash !== null)
      ? B256.fromPartial(object.mixHash)
      : undefined;
    message.nonce = object.nonce ?? BigInt("0");
    message.baseFeePerGas = (object.baseFeePerGas !== undefined && object.baseFeePerGas !== null)
      ? U256.fromPartial(object.baseFeePerGas)
      : undefined;
    message.withdrawalsRoot = (object.withdrawalsRoot !== undefined && object.withdrawalsRoot !== null)
      ? B256.fromPartial(object.withdrawalsRoot)
      : undefined;
    message.totalDifficulty = (object.totalDifficulty !== undefined && object.totalDifficulty !== null)
      ? U256.fromPartial(object.totalDifficulty)
      : undefined;
    message.uncles = object.uncles?.map((e) => B256.fromPartial(e)) || [];
    message.size = (object.size !== undefined && object.size !== null) ? U256.fromPartial(object.size) : undefined;
    message.blobGasUsed = object.blobGasUsed ?? BigInt("0");
    message.excessBlobGas = object.excessBlobGas ?? BigInt("0");
    message.parentBeaconBlockRoot =
      (object.parentBeaconBlockRoot !== undefined && object.parentBeaconBlockRoot !== null)
        ? B256.fromPartial(object.parentBeaconBlockRoot)
        : undefined;
    return message;
  },
};

function createBaseWithdrawal(): Withdrawal {
  return {
    index: BigInt("0"),
    validatorIndex: BigInt("0"),
    withdrawalIndex: BigInt("0"),
    address: undefined,
    amount: undefined,
  };
}

export const Withdrawal = {
  encode(message: Withdrawal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== undefined && message.index !== BigInt("0")) {
      if (BigInt.asUintN(64, message.index) !== message.index) {
        throw new globalThis.Error("value provided for field message.index of type uint64 too large");
      }
      writer.uint32(8).uint64(message.index.toString());
    }
    if (message.validatorIndex !== undefined && message.validatorIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.validatorIndex) !== message.validatorIndex) {
        throw new globalThis.Error("value provided for field message.validatorIndex of type uint64 too large");
      }
      writer.uint32(16).uint64(message.validatorIndex.toString());
    }
    if (message.withdrawalIndex !== undefined && message.withdrawalIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.withdrawalIndex) !== message.withdrawalIndex) {
        throw new globalThis.Error("value provided for field message.withdrawalIndex of type uint64 too large");
      }
      writer.uint32(24).uint64(message.withdrawalIndex.toString());
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(34).fork()).ldelim();
    }
    if (message.amount !== undefined) {
      U256.encode(message.amount, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Withdrawal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawal() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validatorIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.withdrawalIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.amount = U256.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Withdrawal {
    return {
      index: isSet(object.index) ? BigInt(object.index) : BigInt("0"),
      validatorIndex: isSet(object.validatorIndex) ? BigInt(object.validatorIndex) : BigInt("0"),
      withdrawalIndex: isSet(object.withdrawalIndex) ? BigInt(object.withdrawalIndex) : BigInt("0"),
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      amount: isSet(object.amount) ? U256.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: Withdrawal): unknown {
    const obj: any = {};
    if (message.index !== undefined && message.index !== BigInt("0")) {
      obj.index = message.index.toString();
    }
    if (message.validatorIndex !== undefined && message.validatorIndex !== BigInt("0")) {
      obj.validatorIndex = message.validatorIndex.toString();
    }
    if (message.withdrawalIndex !== undefined && message.withdrawalIndex !== BigInt("0")) {
      obj.withdrawalIndex = message.withdrawalIndex.toString();
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.amount !== undefined) {
      obj.amount = U256.toJSON(message.amount);
    }
    return obj;
  },

  create(base?: DeepPartial<Withdrawal>): Withdrawal {
    return Withdrawal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Withdrawal>): Withdrawal {
    const message = createBaseWithdrawal() as any;
    message.index = object.index ?? BigInt("0");
    message.validatorIndex = object.validatorIndex ?? BigInt("0");
    message.withdrawalIndex = object.withdrawalIndex ?? BigInt("0");
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? U256.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return {
    hash: undefined,
    nonce: BigInt("0"),
    transactionIndex: BigInt("0"),
    from: undefined,
    to: undefined,
    value: undefined,
    gasPrice: undefined,
    gas: undefined,
    maxFeePerGas: undefined,
    maxPriorityFeePerGas: undefined,
    input: new Uint8Array(0),
    signature: undefined,
    chainId: BigInt("0"),
    accessList: [],
    transactionType: BigInt("0"),
    maxFeePerBlobGas: undefined,
    blobVersionedHashes: [],
  };
}

export const Transaction = {
  encode(message: Transaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash !== undefined) {
      B256.encode(message.hash, writer.uint32(10).fork()).ldelim();
    }
    if (message.nonce !== undefined && message.nonce !== BigInt("0")) {
      if (BigInt.asUintN(64, message.nonce) !== message.nonce) {
        throw new globalThis.Error("value provided for field message.nonce of type uint64 too large");
      }
      writer.uint32(16).uint64(message.nonce.toString());
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.transactionIndex) !== message.transactionIndex) {
        throw new globalThis.Error("value provided for field message.transactionIndex of type uint64 too large");
      }
      writer.uint32(24).uint64(message.transactionIndex.toString());
    }
    if (message.from !== undefined) {
      Address.encode(message.from, writer.uint32(34).fork()).ldelim();
    }
    if (message.to !== undefined) {
      Address.encode(message.to, writer.uint32(42).fork()).ldelim();
    }
    if (message.value !== undefined) {
      U256.encode(message.value, writer.uint32(50).fork()).ldelim();
    }
    if (message.gasPrice !== undefined) {
      U128.encode(message.gasPrice, writer.uint32(58).fork()).ldelim();
    }
    if (message.gas !== undefined) {
      U256.encode(message.gas, writer.uint32(66).fork()).ldelim();
    }
    if (message.maxFeePerGas !== undefined) {
      U128.encode(message.maxFeePerGas, writer.uint32(74).fork()).ldelim();
    }
    if (message.maxPriorityFeePerGas !== undefined) {
      U128.encode(message.maxPriorityFeePerGas, writer.uint32(82).fork()).ldelim();
    }
    if (message.input !== undefined && message.input.length !== 0) {
      writer.uint32(90).bytes(message.input);
    }
    if (message.signature !== undefined) {
      Signature.encode(message.signature, writer.uint32(98).fork()).ldelim();
    }
    if (message.chainId !== undefined && message.chainId !== BigInt("0")) {
      if (BigInt.asUintN(64, message.chainId) !== message.chainId) {
        throw new globalThis.Error("value provided for field message.chainId of type uint64 too large");
      }
      writer.uint32(104).uint64(message.chainId.toString());
    }
    if (message.accessList !== undefined && message.accessList.length !== 0) {
      for (const v of message.accessList) {
        AccessListItem.encode(v!, writer.uint32(114).fork()).ldelim();
      }
    }
    if (message.transactionType !== undefined && message.transactionType !== BigInt("0")) {
      if (BigInt.asUintN(64, message.transactionType) !== message.transactionType) {
        throw new globalThis.Error("value provided for field message.transactionType of type uint64 too large");
      }
      writer.uint32(120).uint64(message.transactionType.toString());
    }
    if (message.maxFeePerBlobGas !== undefined) {
      U128.encode(message.maxFeePerBlobGas, writer.uint32(130).fork()).ldelim();
    }
    if (message.blobVersionedHashes !== undefined && message.blobVersionedHashes.length !== 0) {
      for (const v of message.blobVersionedHashes) {
        B256.encode(v!, writer.uint32(138).fork()).ldelim();
      }
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = B256.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.nonce = longToBigint(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.transactionIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.from = Address.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.to = Address.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.value = U256.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gasPrice = U128.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gas = U256.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.maxFeePerGas = U128.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.maxPriorityFeePerGas = U128.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.input = reader.bytes();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.signature = Signature.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.chainId = longToBigint(reader.uint64() as Long);
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.accessList!.push(AccessListItem.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.transactionType = longToBigint(reader.uint64() as Long);
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.maxFeePerBlobGas = U128.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.blobVersionedHashes!.push(B256.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      hash: isSet(object.hash) ? B256.fromJSON(object.hash) : undefined,
      nonce: isSet(object.nonce) ? BigInt(object.nonce) : BigInt("0"),
      transactionIndex: isSet(object.transactionIndex) ? BigInt(object.transactionIndex) : BigInt("0"),
      from: isSet(object.from) ? Address.fromJSON(object.from) : undefined,
      to: isSet(object.to) ? Address.fromJSON(object.to) : undefined,
      value: isSet(object.value) ? U256.fromJSON(object.value) : undefined,
      gasPrice: isSet(object.gasPrice) ? U128.fromJSON(object.gasPrice) : undefined,
      gas: isSet(object.gas) ? U256.fromJSON(object.gas) : undefined,
      maxFeePerGas: isSet(object.maxFeePerGas) ? U128.fromJSON(object.maxFeePerGas) : undefined,
      maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? U128.fromJSON(object.maxPriorityFeePerGas) : undefined,
      input: isSet(object.input) ? bytesFromBase64(object.input) : new Uint8Array(0),
      signature: isSet(object.signature) ? Signature.fromJSON(object.signature) : undefined,
      chainId: isSet(object.chainId) ? BigInt(object.chainId) : BigInt("0"),
      accessList: globalThis.Array.isArray(object?.accessList)
        ? object.accessList.map((e: any) => AccessListItem.fromJSON(e))
        : [],
      transactionType: isSet(object.transactionType) ? BigInt(object.transactionType) : BigInt("0"),
      maxFeePerBlobGas: isSet(object.maxFeePerBlobGas) ? U128.fromJSON(object.maxFeePerBlobGas) : undefined,
      blobVersionedHashes: globalThis.Array.isArray(object?.blobVersionedHashes)
        ? object.blobVersionedHashes.map((e: any) => B256.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.hash !== undefined) {
      obj.hash = B256.toJSON(message.hash);
    }
    if (message.nonce !== undefined && message.nonce !== BigInt("0")) {
      obj.nonce = message.nonce.toString();
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      obj.transactionIndex = message.transactionIndex.toString();
    }
    if (message.from !== undefined) {
      obj.from = Address.toJSON(message.from);
    }
    if (message.to !== undefined) {
      obj.to = Address.toJSON(message.to);
    }
    if (message.value !== undefined) {
      obj.value = U256.toJSON(message.value);
    }
    if (message.gasPrice !== undefined) {
      obj.gasPrice = U128.toJSON(message.gasPrice);
    }
    if (message.gas !== undefined) {
      obj.gas = U256.toJSON(message.gas);
    }
    if (message.maxFeePerGas !== undefined) {
      obj.maxFeePerGas = U128.toJSON(message.maxFeePerGas);
    }
    if (message.maxPriorityFeePerGas !== undefined) {
      obj.maxPriorityFeePerGas = U128.toJSON(message.maxPriorityFeePerGas);
    }
    if (message.input !== undefined && message.input.length !== 0) {
      obj.input = base64FromBytes(message.input);
    }
    if (message.signature !== undefined) {
      obj.signature = Signature.toJSON(message.signature);
    }
    if (message.chainId !== undefined && message.chainId !== BigInt("0")) {
      obj.chainId = message.chainId.toString();
    }
    if (message.accessList?.length) {
      obj.accessList = message.accessList.map((e) => AccessListItem.toJSON(e));
    }
    if (message.transactionType !== undefined && message.transactionType !== BigInt("0")) {
      obj.transactionType = message.transactionType.toString();
    }
    if (message.maxFeePerBlobGas !== undefined) {
      obj.maxFeePerBlobGas = U128.toJSON(message.maxFeePerBlobGas);
    }
    if (message.blobVersionedHashes?.length) {
      obj.blobVersionedHashes = message.blobVersionedHashes.map((e) => B256.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Transaction>): Transaction {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transaction>): Transaction {
    const message = createBaseTransaction() as any;
    message.hash = (object.hash !== undefined && object.hash !== null) ? B256.fromPartial(object.hash) : undefined;
    message.nonce = object.nonce ?? BigInt("0");
    message.transactionIndex = object.transactionIndex ?? BigInt("0");
    message.from = (object.from !== undefined && object.from !== null) ? Address.fromPartial(object.from) : undefined;
    message.to = (object.to !== undefined && object.to !== null) ? Address.fromPartial(object.to) : undefined;
    message.value = (object.value !== undefined && object.value !== null) ? U256.fromPartial(object.value) : undefined;
    message.gasPrice = (object.gasPrice !== undefined && object.gasPrice !== null)
      ? U128.fromPartial(object.gasPrice)
      : undefined;
    message.gas = (object.gas !== undefined && object.gas !== null) ? U256.fromPartial(object.gas) : undefined;
    message.maxFeePerGas = (object.maxFeePerGas !== undefined && object.maxFeePerGas !== null)
      ? U128.fromPartial(object.maxFeePerGas)
      : undefined;
    message.maxPriorityFeePerGas = (object.maxPriorityFeePerGas !== undefined && object.maxPriorityFeePerGas !== null)
      ? U128.fromPartial(object.maxPriorityFeePerGas)
      : undefined;
    message.input = object.input ?? new Uint8Array(0);
    message.signature = (object.signature !== undefined && object.signature !== null)
      ? Signature.fromPartial(object.signature)
      : undefined;
    message.chainId = object.chainId ?? BigInt("0");
    message.accessList = object.accessList?.map((e) => AccessListItem.fromPartial(e)) || [];
    message.transactionType = object.transactionType ?? BigInt("0");
    message.maxFeePerBlobGas = (object.maxFeePerBlobGas !== undefined && object.maxFeePerBlobGas !== null)
      ? U128.fromPartial(object.maxFeePerBlobGas)
      : undefined;
    message.blobVersionedHashes = object.blobVersionedHashes?.map((e) => B256.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTransactionReceipt(): TransactionReceipt {
  return {
    transactionHash: undefined,
    transactionIndex: BigInt("0"),
    cumulativeGasUsed: undefined,
    gasUsed: undefined,
    effectiveGasPrice: undefined,
    from: undefined,
    to: undefined,
    contractAddress: undefined,
    logsBloom: undefined,
    statusCode: BigInt("0"),
    transactionType: BigInt("0"),
    blobGasUsed: undefined,
    blobGasPrice: undefined,
  };
}

export const TransactionReceipt = {
  encode(message: TransactionReceipt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transactionHash !== undefined) {
      B256.encode(message.transactionHash, writer.uint32(10).fork()).ldelim();
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.transactionIndex) !== message.transactionIndex) {
        throw new globalThis.Error("value provided for field message.transactionIndex of type uint64 too large");
      }
      writer.uint32(16).uint64(message.transactionIndex.toString());
    }
    if (message.cumulativeGasUsed !== undefined) {
      U256.encode(message.cumulativeGasUsed, writer.uint32(26).fork()).ldelim();
    }
    if (message.gasUsed !== undefined) {
      U256.encode(message.gasUsed, writer.uint32(34).fork()).ldelim();
    }
    if (message.effectiveGasPrice !== undefined) {
      U128.encode(message.effectiveGasPrice, writer.uint32(42).fork()).ldelim();
    }
    if (message.from !== undefined) {
      Address.encode(message.from, writer.uint32(50).fork()).ldelim();
    }
    if (message.to !== undefined) {
      Address.encode(message.to, writer.uint32(58).fork()).ldelim();
    }
    if (message.contractAddress !== undefined) {
      Address.encode(message.contractAddress, writer.uint32(66).fork()).ldelim();
    }
    if (message.logsBloom !== undefined) {
      Bloom.encode(message.logsBloom, writer.uint32(74).fork()).ldelim();
    }
    if (message.statusCode !== undefined && message.statusCode !== BigInt("0")) {
      if (BigInt.asUintN(64, message.statusCode) !== message.statusCode) {
        throw new globalThis.Error("value provided for field message.statusCode of type uint64 too large");
      }
      writer.uint32(80).uint64(message.statusCode.toString());
    }
    if (message.transactionType !== undefined && message.transactionType !== BigInt("0")) {
      if (BigInt.asUintN(64, message.transactionType) !== message.transactionType) {
        throw new globalThis.Error("value provided for field message.transactionType of type uint64 too large");
      }
      writer.uint32(88).uint64(message.transactionType.toString());
    }
    if (message.blobGasUsed !== undefined) {
      U128.encode(message.blobGasUsed, writer.uint32(98).fork()).ldelim();
    }
    if (message.blobGasPrice !== undefined) {
      U128.encode(message.blobGasPrice, writer.uint32(106).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionReceipt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionReceipt() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transactionHash = B256.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.transactionIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cumulativeGasUsed = U256.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gasUsed = U256.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.effectiveGasPrice = U128.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.from = Address.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.to = Address.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contractAddress = Address.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.logsBloom = Bloom.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.statusCode = longToBigint(reader.uint64() as Long);
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.transactionType = longToBigint(reader.uint64() as Long);
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.blobGasUsed = U128.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.blobGasPrice = U128.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionReceipt {
    return {
      transactionHash: isSet(object.transactionHash) ? B256.fromJSON(object.transactionHash) : undefined,
      transactionIndex: isSet(object.transactionIndex) ? BigInt(object.transactionIndex) : BigInt("0"),
      cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? U256.fromJSON(object.cumulativeGasUsed) : undefined,
      gasUsed: isSet(object.gasUsed) ? U256.fromJSON(object.gasUsed) : undefined,
      effectiveGasPrice: isSet(object.effectiveGasPrice) ? U128.fromJSON(object.effectiveGasPrice) : undefined,
      from: isSet(object.from) ? Address.fromJSON(object.from) : undefined,
      to: isSet(object.to) ? Address.fromJSON(object.to) : undefined,
      contractAddress: isSet(object.contractAddress) ? Address.fromJSON(object.contractAddress) : undefined,
      logsBloom: isSet(object.logsBloom) ? Bloom.fromJSON(object.logsBloom) : undefined,
      statusCode: isSet(object.statusCode) ? BigInt(object.statusCode) : BigInt("0"),
      transactionType: isSet(object.transactionType) ? BigInt(object.transactionType) : BigInt("0"),
      blobGasUsed: isSet(object.blobGasUsed) ? U128.fromJSON(object.blobGasUsed) : undefined,
      blobGasPrice: isSet(object.blobGasPrice) ? U128.fromJSON(object.blobGasPrice) : undefined,
    };
  },

  toJSON(message: TransactionReceipt): unknown {
    const obj: any = {};
    if (message.transactionHash !== undefined) {
      obj.transactionHash = B256.toJSON(message.transactionHash);
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      obj.transactionIndex = message.transactionIndex.toString();
    }
    if (message.cumulativeGasUsed !== undefined) {
      obj.cumulativeGasUsed = U256.toJSON(message.cumulativeGasUsed);
    }
    if (message.gasUsed !== undefined) {
      obj.gasUsed = U256.toJSON(message.gasUsed);
    }
    if (message.effectiveGasPrice !== undefined) {
      obj.effectiveGasPrice = U128.toJSON(message.effectiveGasPrice);
    }
    if (message.from !== undefined) {
      obj.from = Address.toJSON(message.from);
    }
    if (message.to !== undefined) {
      obj.to = Address.toJSON(message.to);
    }
    if (message.contractAddress !== undefined) {
      obj.contractAddress = Address.toJSON(message.contractAddress);
    }
    if (message.logsBloom !== undefined) {
      obj.logsBloom = Bloom.toJSON(message.logsBloom);
    }
    if (message.statusCode !== undefined && message.statusCode !== BigInt("0")) {
      obj.statusCode = message.statusCode.toString();
    }
    if (message.transactionType !== undefined && message.transactionType !== BigInt("0")) {
      obj.transactionType = message.transactionType.toString();
    }
    if (message.blobGasUsed !== undefined) {
      obj.blobGasUsed = U128.toJSON(message.blobGasUsed);
    }
    if (message.blobGasPrice !== undefined) {
      obj.blobGasPrice = U128.toJSON(message.blobGasPrice);
    }
    return obj;
  },

  create(base?: DeepPartial<TransactionReceipt>): TransactionReceipt {
    return TransactionReceipt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransactionReceipt>): TransactionReceipt {
    const message = createBaseTransactionReceipt() as any;
    message.transactionHash = (object.transactionHash !== undefined && object.transactionHash !== null)
      ? B256.fromPartial(object.transactionHash)
      : undefined;
    message.transactionIndex = object.transactionIndex ?? BigInt("0");
    message.cumulativeGasUsed = (object.cumulativeGasUsed !== undefined && object.cumulativeGasUsed !== null)
      ? U256.fromPartial(object.cumulativeGasUsed)
      : undefined;
    message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
      ? U256.fromPartial(object.gasUsed)
      : undefined;
    message.effectiveGasPrice = (object.effectiveGasPrice !== undefined && object.effectiveGasPrice !== null)
      ? U128.fromPartial(object.effectiveGasPrice)
      : undefined;
    message.from = (object.from !== undefined && object.from !== null) ? Address.fromPartial(object.from) : undefined;
    message.to = (object.to !== undefined && object.to !== null) ? Address.fromPartial(object.to) : undefined;
    message.contractAddress = (object.contractAddress !== undefined && object.contractAddress !== null)
      ? Address.fromPartial(object.contractAddress)
      : undefined;
    message.logsBloom = (object.logsBloom !== undefined && object.logsBloom !== null)
      ? Bloom.fromPartial(object.logsBloom)
      : undefined;
    message.statusCode = object.statusCode ?? BigInt("0");
    message.transactionType = object.transactionType ?? BigInt("0");
    message.blobGasUsed = (object.blobGasUsed !== undefined && object.blobGasUsed !== null)
      ? U128.fromPartial(object.blobGasUsed)
      : undefined;
    message.blobGasPrice = (object.blobGasPrice !== undefined && object.blobGasPrice !== null)
      ? U128.fromPartial(object.blobGasPrice)
      : undefined;
    return message;
  },
};

function createBaseLog(): Log {
  return {
    address: undefined,
    topics: [],
    data: new Uint8Array(0),
    logIndex: BigInt("0"),
    transactionIndex: BigInt("0"),
    transactionHash: undefined,
  };
}

export const Log = {
  encode(message: Log, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(10).fork()).ldelim();
    }
    if (message.topics !== undefined && message.topics.length !== 0) {
      for (const v of message.topics) {
        B256.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    if (message.data !== undefined && message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    if (message.logIndex !== undefined && message.logIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.logIndex) !== message.logIndex) {
        throw new globalThis.Error("value provided for field message.logIndex of type uint64 too large");
      }
      writer.uint32(32).uint64(message.logIndex.toString());
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      if (BigInt.asUintN(64, message.transactionIndex) !== message.transactionIndex) {
        throw new globalThis.Error("value provided for field message.transactionIndex of type uint64 too large");
      }
      writer.uint32(40).uint64(message.transactionIndex.toString());
    }
    if (message.transactionHash !== undefined) {
      B256.encode(message.transactionHash, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Log {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLog() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.topics!.push(B256.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.logIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.transactionIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.transactionHash = B256.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Log {
    return {
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => B256.fromJSON(e)) : [],
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      logIndex: isSet(object.logIndex) ? BigInt(object.logIndex) : BigInt("0"),
      transactionIndex: isSet(object.transactionIndex) ? BigInt(object.transactionIndex) : BigInt("0"),
      transactionHash: isSet(object.transactionHash) ? B256.fromJSON(object.transactionHash) : undefined,
    };
  },

  toJSON(message: Log): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => B256.toJSON(e));
    }
    if (message.data !== undefined && message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.logIndex !== undefined && message.logIndex !== BigInt("0")) {
      obj.logIndex = message.logIndex.toString();
    }
    if (message.transactionIndex !== undefined && message.transactionIndex !== BigInt("0")) {
      obj.transactionIndex = message.transactionIndex.toString();
    }
    if (message.transactionHash !== undefined) {
      obj.transactionHash = B256.toJSON(message.transactionHash);
    }
    return obj;
  },

  create(base?: DeepPartial<Log>): Log {
    return Log.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Log>): Log {
    const message = createBaseLog() as any;
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.topics = object.topics?.map((e) => B256.fromPartial(e)) || [];
    message.data = object.data ?? new Uint8Array(0);
    message.logIndex = object.logIndex ?? BigInt("0");
    message.transactionIndex = object.transactionIndex ?? BigInt("0");
    message.transactionHash = (object.transactionHash !== undefined && object.transactionHash !== null)
      ? B256.fromPartial(object.transactionHash)
      : undefined;
    return message;
  },
};

function createBaseSignature(): Signature {
  return { r: undefined, s: undefined, v: undefined, yParity: false };
}

export const Signature = {
  encode(message: Signature, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.r !== undefined) {
      U256.encode(message.r, writer.uint32(10).fork()).ldelim();
    }
    if (message.s !== undefined) {
      U256.encode(message.s, writer.uint32(18).fork()).ldelim();
    }
    if (message.v !== undefined) {
      U256.encode(message.v, writer.uint32(26).fork()).ldelim();
    }
    if (message.yParity !== undefined && message.yParity !== false) {
      writer.uint32(32).bool(message.yParity);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Signature {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignature() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.r = U256.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.s = U256.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.v = U256.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.yParity = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Signature {
    return {
      r: isSet(object.r) ? U256.fromJSON(object.r) : undefined,
      s: isSet(object.s) ? U256.fromJSON(object.s) : undefined,
      v: isSet(object.v) ? U256.fromJSON(object.v) : undefined,
      yParity: isSet(object.yParity) ? globalThis.Boolean(object.yParity) : false,
    };
  },

  toJSON(message: Signature): unknown {
    const obj: any = {};
    if (message.r !== undefined) {
      obj.r = U256.toJSON(message.r);
    }
    if (message.s !== undefined) {
      obj.s = U256.toJSON(message.s);
    }
    if (message.v !== undefined) {
      obj.v = U256.toJSON(message.v);
    }
    if (message.yParity !== undefined && message.yParity !== false) {
      obj.yParity = message.yParity;
    }
    return obj;
  },

  create(base?: DeepPartial<Signature>): Signature {
    return Signature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Signature>): Signature {
    const message = createBaseSignature() as any;
    message.r = (object.r !== undefined && object.r !== null) ? U256.fromPartial(object.r) : undefined;
    message.s = (object.s !== undefined && object.s !== null) ? U256.fromPartial(object.s) : undefined;
    message.v = (object.v !== undefined && object.v !== null) ? U256.fromPartial(object.v) : undefined;
    message.yParity = object.yParity ?? false;
    return message;
  },
};

function createBaseAccessListItem(): AccessListItem {
  return { address: undefined, storageKeys: [] };
}

export const AccessListItem = {
  encode(message: AccessListItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(10).fork()).ldelim();
    }
    if (message.storageKeys !== undefined && message.storageKeys.length !== 0) {
      for (const v of message.storageKeys) {
        B256.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccessListItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessListItem() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storageKeys!.push(B256.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessListItem {
    return {
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      storageKeys: globalThis.Array.isArray(object?.storageKeys)
        ? object.storageKeys.map((e: any) => B256.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AccessListItem): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.storageKeys?.length) {
      obj.storageKeys = message.storageKeys.map((e) => B256.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccessListItem>): AccessListItem {
    return AccessListItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessListItem>): AccessListItem {
    const message = createBaseAccessListItem() as any;
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.storageKeys = object.storageKeys?.map((e) => B256.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds?.toString()) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
