// # Apibara Node service.
syntax = "proto3";

package apibara.node.v1alpha1;

import "google/protobuf/any.proto";

service Node {
  // Get information about the node and its status.
  rpc Status(StatusRequest) returns (StatusResponse);

  // Stream messages from the node.
  rpc StreamMessages(StreamMessagesRequest) returns (stream StreamMessagesResponse);
}

// Status request. It's empty.
message StatusRequest {
}

// Status response. Returns information about the node's stream.
message StatusResponse {
  oneof message {
    SyncingStatus syncing = 1;
    SyncedStatus synced = 2;
    NotStartedStatus not_started = 3;
  }
}

// Node is syncing with their sources.
message SyncingStatus {
  // The latest sequence number.
  uint64 sequence = 1;
  // The syncing status of each input.
  repeated InputSyncingStatus inputs = 2;
}

// Syncing status of the node's input.
message InputSyncingStatus {
  // Latest sequence number.
  uint64 head = 1;
  // Latest indexed sequenced number.
  uint64 indexed = 2;
}

// Node is fully synced.
message SyncedStatus {
  // The latest sequence number.
  uint64 sequence = 1;
}

// Node didn't start syncing.
message NotStartedStatus {
}

// Message sent from the client to the node.
message ConnectRequest {
  // Start streaming from the provided sequence number.
  uint64 starting_sequence = 1;
}

// Message sent from the node to the client.
message ConnectResponse {
  oneof message {
    Invalidate invalidate = 1;
    Data data = 2;
  }
}

// Message sent from the client to the node.
message StreamMessagesRequest {
  // Start streaming from the provided sequence number.
  uint64 starting_sequence = 1;
  // If greater than 0, send pending blocks at the specified interval.
  uint32 pending_block_interval_seconds = 2;
}

// Message sent from the node to the client.
message StreamMessagesResponse {
  oneof message {
    Invalidate invalidate = 1;
    Data data = 2;
    Heartbeat heartbeat = 3;
    Data pending = 4;
  }
}

// Invalidate data after (inclusive) the given sequence number.
message Invalidate {
  uint64 sequence = 1;
}

message Data {
  uint64 sequence = 1;
  google.protobuf.Any data = 2;
}

// Sent to clients to check if stream is still connected.
message Heartbeat {
}