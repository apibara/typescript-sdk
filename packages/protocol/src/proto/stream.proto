// Apibara Stream service.
syntax = "proto3";

package apibara.node.v1alpha2;

service Stream {
  // Stream data from the node.
  rpc StreamData(stream StreamDataRequest) returns (stream StreamDataResponse);
}

// Request data to be streamed.
message StreamDataRequest {
  // Used by the client to uniquely identify a stream.
  // All streams use `stream_id = 0` by default.
  optional uint64 stream_id = 1;
  // How many items to send in a single response.
  optional uint64 batch_size = 2;
  // Start streaming from the provided cursor.
  Cursor starting_cursor = 3;
  // Return data with the specified finality.
  // If not specified, defaults to `DATA_STATUS_ACCEPTED`.
  optional DataFinality finality = 4;
  // Return data according to the stream-specific filter.
  bytes filter = 5;
}

// Contains the data requested from the client.
message StreamDataResponse {
  // The stream id.
  uint64 stream_id = 1;
  oneof message {
    Invalidate invalidate = 2;
    Data data = 3;
    Heartbeat heartbeat = 4;
  }
}

// A cursor over the stream content.
message Cursor {
  // Key used for ordering messages in the stream.
  uint64 order_key = 1;
  // Key used to discriminate branches in the stream.
  bytes unique_key = 2;
}

// Data finality.
enum DataFinality {
  DATA_STATUS_UNKNOWN = 0;
  // Data was received, but is not part of the canonical chain yet.
  DATA_STATUS_PENDING = 1;
  // Data is now part of the canonical chain, but could still be invalidated.
  DATA_STATUS_ACCEPTED = 2;
  // Data is finalized and cannot be invalidated.
  DATA_STATUS_FINALIZED = 3;
}

// Invalidate data after the given cursor.
message Invalidate {
  // The cursor of the message before the now invalid data.
  Cursor cursor = 1;
}

// A batch of data.
message Data {
  // Cursor of the last item in the batch.
  Cursor end_cursor = 1;
  // The finality status of the data in the batch.
  DataFinality finality = 2;
  // The stream data.
  repeated bytes data = 3;
  // Cursor used to produced the batch.
  Cursor cursor = 4;
}

// Sent to clients to check if stream is still connected.
message Heartbeat {}