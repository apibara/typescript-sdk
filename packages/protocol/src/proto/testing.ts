// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: testing.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "dna.v2.testing";

export interface MockFilter {
  readonly filter?: string | undefined;
}

export interface MockBlock {
  readonly data?: string | undefined;
}

function createBaseMockFilter(): MockFilter {
  return { filter: undefined };
}

export const MockFilter = {
  encode(message: MockFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.filter !== undefined) {
      writer.uint32(10).string(message.filter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MockFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMockFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MockFilter {
    return { filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined };
  },

  toJSON(message: MockFilter): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<MockFilter>): MockFilter {
    return MockFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MockFilter>): MockFilter {
    const message = createBaseMockFilter() as any;
    message.filter = object.filter ?? undefined;
    return message;
  },
};

function createBaseMockBlock(): MockBlock {
  return { data: undefined };
}

export const MockBlock = {
  encode(message: MockBlock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MockBlock {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMockBlock() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MockBlock {
    return { data: isSet(object.data) ? globalThis.String(object.data) : undefined };
  },

  toJSON(message: MockBlock): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<MockBlock>): MockBlock {
    return MockBlock.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MockBlock>): MockBlock {
    const message = createBaseMockBlock() as any;
    message.data = object.data ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
