// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: filter.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { FieldElement } from "./common";

export const protobufPackage = "starknet.v2";

/** Starknet DNA definitions (filter). */

export interface Filter {
  /** Include header. */
  readonly header?:
    | HeaderFilter
    | undefined;
  /** Filter transactions. */
  readonly transactions?:
    | readonly TransactionFilter[]
    | undefined;
  /** Filter events. */
  readonly events?:
    | readonly EventFilter[]
    | undefined;
  /** Filter messages to L1. */
  readonly messages?: readonly MessageToL1Filter[] | undefined;
}

export interface HeaderFilter {
  /** Always include header data. Defaults to `false`. */
  readonly always?: boolean | undefined;
}

/** Filter transactions. */
export interface TransactionFilter {
  /**
   * Include reverted transactions.
   *
   * Defaults to false.
   */
  readonly includeReverted?:
    | boolean
    | undefined;
  /** Flag to request the transaction's receipt. Defaults to `false`. */
  readonly includeReceipt?:
    | boolean
    | undefined;
  /** Flag to request the transaction's logs. Defaults to `false`. */
  readonly includeEvents?: boolean | undefined;
}

/** Filter events. */
export interface EventFilter {
  /** Filter by contract emitting the event. */
  readonly fromAddress?:
    | FieldElement
    | undefined;
  /** Filter keys that prefix-match the given data. */
  readonly keys?:
    | readonly FieldElement[]
    | undefined;
  /**
   * Only returns events with keys of exactly the same length as the filter.
   *
   * Defaults to `false`.
   */
  readonly strict?:
    | boolean
    | undefined;
  /**
   * Include events emitted by reverted transactions.
   *
   * Defaults to false.
   */
  readonly includeReverted?:
    | boolean
    | undefined;
  /**
   * Include the transaction that emitted the event.
   *
   * Defaults to false.
   */
  readonly includeTransaction?:
    | boolean
    | undefined;
  /**
   * Include the receipt of the transaction that emitted the event.
   *
   * Defaults to false.
   */
  readonly includeReceipt?: boolean | undefined;
}

/** Filter messages to L1. */
export interface MessageToL1Filter {
  /** Filter by destination address. */
  readonly toAddress?:
    | FieldElement
    | undefined;
  /**
   * Include messages sent by reverted transactions.
   *
   * Defaults to false.
   */
  readonly includeReverted?: boolean | undefined;
}

function createBaseFilter(): Filter {
  return { header: undefined, transactions: [], events: [], messages: [] };
}

export const Filter = {
  encode(message: Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      HeaderFilter.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    if (message.transactions !== undefined && message.transactions.length !== 0) {
      for (const v of message.transactions) {
        TransactionFilter.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    if (message.events !== undefined && message.events.length !== 0) {
      for (const v of message.events) {
        EventFilter.encode(v!, writer.uint32(26).fork()).ldelim();
      }
    }
    if (message.messages !== undefined && message.messages.length !== 0) {
      for (const v of message.messages) {
        MessageToL1Filter.encode(v!, writer.uint32(34).fork()).ldelim();
      }
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = HeaderFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transactions!.push(TransactionFilter.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.events!.push(EventFilter.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.messages!.push(MessageToL1Filter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filter {
    return {
      header: isSet(object.header) ? HeaderFilter.fromJSON(object.header) : undefined,
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => TransactionFilter.fromJSON(e))
        : [],
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => EventFilter.fromJSON(e)) : [],
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => MessageToL1Filter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Filter): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = HeaderFilter.toJSON(message.header);
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => TransactionFilter.toJSON(e));
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => EventFilter.toJSON(e));
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => MessageToL1Filter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Filter>): Filter {
    return Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Filter>): Filter {
    const message = createBaseFilter() as any;
    message.header = (object.header !== undefined && object.header !== null)
      ? HeaderFilter.fromPartial(object.header)
      : undefined;
    message.transactions = object.transactions?.map((e) => TransactionFilter.fromPartial(e)) || [];
    message.events = object.events?.map((e) => EventFilter.fromPartial(e)) || [];
    message.messages = object.messages?.map((e) => MessageToL1Filter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHeaderFilter(): HeaderFilter {
  return { always: undefined };
}

export const HeaderFilter = {
  encode(message: HeaderFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.always !== undefined) {
      writer.uint32(8).bool(message.always);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HeaderFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.always = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderFilter {
    return { always: isSet(object.always) ? globalThis.Boolean(object.always) : undefined };
  },

  toJSON(message: HeaderFilter): unknown {
    const obj: any = {};
    if (message.always !== undefined) {
      obj.always = message.always;
    }
    return obj;
  },

  create(base?: DeepPartial<HeaderFilter>): HeaderFilter {
    return HeaderFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HeaderFilter>): HeaderFilter {
    const message = createBaseHeaderFilter() as any;
    message.always = object.always ?? undefined;
    return message;
  },
};

function createBaseTransactionFilter(): TransactionFilter {
  return { includeReverted: undefined, includeReceipt: undefined, includeEvents: undefined };
}

export const TransactionFilter = {
  encode(message: TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.includeReverted !== undefined) {
      writer.uint32(8).bool(message.includeReverted);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(16).bool(message.includeReceipt);
    }
    if (message.includeEvents !== undefined) {
      writer.uint32(24).bool(message.includeEvents);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.includeReverted = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeEvents = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionFilter {
    return {
      includeReverted: isSet(object.includeReverted) ? globalThis.Boolean(object.includeReverted) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
      includeEvents: isSet(object.includeEvents) ? globalThis.Boolean(object.includeEvents) : undefined,
    };
  },

  toJSON(message: TransactionFilter): unknown {
    const obj: any = {};
    if (message.includeReverted !== undefined) {
      obj.includeReverted = message.includeReverted;
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    if (message.includeEvents !== undefined) {
      obj.includeEvents = message.includeEvents;
    }
    return obj;
  },

  create(base?: DeepPartial<TransactionFilter>): TransactionFilter {
    return TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransactionFilter>): TransactionFilter {
    const message = createBaseTransactionFilter() as any;
    message.includeReverted = object.includeReverted ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    message.includeEvents = object.includeEvents ?? undefined;
    return message;
  },
};

function createBaseEventFilter(): EventFilter {
  return {
    fromAddress: undefined,
    keys: [],
    strict: undefined,
    includeReverted: undefined,
    includeTransaction: undefined,
    includeReceipt: undefined,
  };
}

export const EventFilter = {
  encode(message: EventFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fromAddress !== undefined) {
      FieldElement.encode(message.fromAddress, writer.uint32(10).fork()).ldelim();
    }
    if (message.keys !== undefined && message.keys.length !== 0) {
      for (const v of message.keys) {
        FieldElement.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    if (message.strict !== undefined) {
      writer.uint32(24).bool(message.strict);
    }
    if (message.includeReverted !== undefined) {
      writer.uint32(32).bool(message.includeReverted);
    }
    if (message.includeTransaction !== undefined) {
      writer.uint32(40).bool(message.includeTransaction);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(48).bool(message.includeReceipt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fromAddress = FieldElement.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keys!.push(FieldElement.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.strict = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeReverted = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeTransaction = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventFilter {
    return {
      fromAddress: isSet(object.fromAddress) ? FieldElement.fromJSON(object.fromAddress) : undefined,
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => FieldElement.fromJSON(e)) : [],
      strict: isSet(object.strict) ? globalThis.Boolean(object.strict) : undefined,
      includeReverted: isSet(object.includeReverted) ? globalThis.Boolean(object.includeReverted) : undefined,
      includeTransaction: isSet(object.includeTransaction) ? globalThis.Boolean(object.includeTransaction) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
    };
  },

  toJSON(message: EventFilter): unknown {
    const obj: any = {};
    if (message.fromAddress !== undefined) {
      obj.fromAddress = FieldElement.toJSON(message.fromAddress);
    }
    if (message.keys?.length) {
      obj.keys = message.keys.map((e) => FieldElement.toJSON(e));
    }
    if (message.strict !== undefined) {
      obj.strict = message.strict;
    }
    if (message.includeReverted !== undefined) {
      obj.includeReverted = message.includeReverted;
    }
    if (message.includeTransaction !== undefined) {
      obj.includeTransaction = message.includeTransaction;
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    return obj;
  },

  create(base?: DeepPartial<EventFilter>): EventFilter {
    return EventFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventFilter>): EventFilter {
    const message = createBaseEventFilter() as any;
    message.fromAddress = (object.fromAddress !== undefined && object.fromAddress !== null)
      ? FieldElement.fromPartial(object.fromAddress)
      : undefined;
    message.keys = object.keys?.map((e) => FieldElement.fromPartial(e)) || [];
    message.strict = object.strict ?? undefined;
    message.includeReverted = object.includeReverted ?? undefined;
    message.includeTransaction = object.includeTransaction ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    return message;
  },
};

function createBaseMessageToL1Filter(): MessageToL1Filter {
  return { toAddress: undefined, includeReverted: undefined };
}

export const MessageToL1Filter = {
  encode(message: MessageToL1Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.toAddress !== undefined) {
      FieldElement.encode(message.toAddress, writer.uint32(10).fork()).ldelim();
    }
    if (message.includeReverted !== undefined) {
      writer.uint32(32).bool(message.includeReverted);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MessageToL1Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageToL1Filter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toAddress = FieldElement.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeReverted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageToL1Filter {
    return {
      toAddress: isSet(object.toAddress) ? FieldElement.fromJSON(object.toAddress) : undefined,
      includeReverted: isSet(object.includeReverted) ? globalThis.Boolean(object.includeReverted) : undefined,
    };
  },

  toJSON(message: MessageToL1Filter): unknown {
    const obj: any = {};
    if (message.toAddress !== undefined) {
      obj.toAddress = FieldElement.toJSON(message.toAddress);
    }
    if (message.includeReverted !== undefined) {
      obj.includeReverted = message.includeReverted;
    }
    return obj;
  },

  create(base?: DeepPartial<MessageToL1Filter>): MessageToL1Filter {
    return MessageToL1Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageToL1Filter>): MessageToL1Filter {
    const message = createBaseMessageToL1Filter() as any;
    message.toAddress = (object.toAddress !== undefined && object.toAddress !== null)
      ? FieldElement.fromPartial(object.toAddress)
      : undefined;
    message.includeReverted = object.includeReverted ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
