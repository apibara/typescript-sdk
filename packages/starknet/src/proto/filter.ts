// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: filter.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { FieldElement } from "./common";

export const protobufPackage = "starknet.v2";

/** Starknet DNA definitions (filter). */

export enum TransactionStatusFilter {
  UNSPECIFIED = 0,
  SUCCEEDED = 1,
  REVERTED = 2,
  ALL = 3,
  UNRECOGNIZED = -1,
}

export function transactionStatusFilterFromJSON(object: any): TransactionStatusFilter {
  switch (object) {
    case 0:
    case "TRANSACTION_STATUS_FILTER_UNSPECIFIED":
      return TransactionStatusFilter.UNSPECIFIED;
    case 1:
    case "TRANSACTION_STATUS_FILTER_SUCCEEDED":
      return TransactionStatusFilter.SUCCEEDED;
    case 2:
    case "TRANSACTION_STATUS_FILTER_REVERTED":
      return TransactionStatusFilter.REVERTED;
    case 3:
    case "TRANSACTION_STATUS_FILTER_ALL":
      return TransactionStatusFilter.ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TransactionStatusFilter.UNRECOGNIZED;
  }
}

export function transactionStatusFilterToJSON(object: TransactionStatusFilter): string {
  switch (object) {
    case TransactionStatusFilter.UNSPECIFIED:
      return "TRANSACTION_STATUS_FILTER_UNSPECIFIED";
    case TransactionStatusFilter.SUCCEEDED:
      return "TRANSACTION_STATUS_FILTER_SUCCEEDED";
    case TransactionStatusFilter.REVERTED:
      return "TRANSACTION_STATUS_FILTER_REVERTED";
    case TransactionStatusFilter.ALL:
      return "TRANSACTION_STATUS_FILTER_ALL";
    case TransactionStatusFilter.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Filter {
  /** Include header. */
  readonly header?:
    | HeaderFilter
    | undefined;
  /** Filter transactions. */
  readonly transactions?:
    | readonly TransactionFilter[]
    | undefined;
  /** Filter events. */
  readonly events?:
    | readonly EventFilter[]
    | undefined;
  /** Filter messages to L1. */
  readonly messages?: readonly MessageToL1Filter[] | undefined;
}

export interface HeaderFilter {
  /** Always include header data. Defaults to `false`. */
  readonly always?: boolean | undefined;
}

/** Filter events. */
export interface EventFilter {
  readonly id?:
    | number
    | undefined;
  /** Filter by contract emitting the event. */
  readonly address?:
    | FieldElement
    | undefined;
  /** Filter keys that prefix-match the given data. */
  readonly keys?:
    | readonly Key[]
    | undefined;
  /**
   * Only returns events with keys of exactly the same length as the filter.
   *
   * Defaults to `false`.
   */
  readonly strict?:
    | boolean
    | undefined;
  /**
   * Filter based on the transaction status.
   *
   * Defaults to `Succeeded`.
   */
  readonly transactionStatus?:
    | TransactionStatusFilter
    | undefined;
  /**
   * Include the transaction that emitted the event.
   *
   * Defaults to false.
   */
  readonly includeTransaction?:
    | boolean
    | undefined;
  /**
   * Include the receipt of the transaction that emitted the event.
   *
   * Defaults to false.
   */
  readonly includeReceipt?:
    | boolean
    | undefined;
  /**
   * Include the messages to L1 sent by the transaction that emitted the event.
   *
   * Defaults to false.
   */
  readonly includeMessages?:
    | boolean
    | undefined;
  /**
   * Include sibling events, that is events emitted by the same transaction.
   *
   * Defaults to false.
   */
  readonly includeSiblings?: boolean | undefined;
}

export interface Key {
  /** The event key. If empty, matches any event key. */
  readonly value?: FieldElement | undefined;
}

/** Filter messages to L1. */
export interface MessageToL1Filter {
  readonly id?:
    | number
    | undefined;
  /** Filter by sender address. */
  readonly fromAddress?:
    | FieldElement
    | undefined;
  /** Filter by destination address. */
  readonly toAddress?:
    | FieldElement
    | undefined;
  /**
   * Filter based on the transaction status.
   *
   * Defaults to `Succeeded`.
   */
  readonly transactionStatus?:
    | TransactionStatusFilter
    | undefined;
  /**
   * Include the transaction that sent the message.
   *
   * Defaults to false.
   */
  readonly includeTransaction?:
    | boolean
    | undefined;
  /**
   * Include the receipt of the transaction that sent the message.
   *
   * Defaults to false.
   */
  readonly includeReceipt?:
    | boolean
    | undefined;
  /**
   * Include the events of the transaction that sent the message.
   *
   * Defaults to false.
   */
  readonly includeEvents?:
    | boolean
    | undefined;
  /**
   * Include the messages of the transaction that sent the message.
   *
   * Defaults to false.
   */
  readonly includeSiblings?: boolean | undefined;
}

/** Filter transactions. */
export interface TransactionFilter {
  readonly id?:
    | number
    | undefined;
  /**
   * Filter based on the transaction status.
   *
   * Defaults to `Succeeded`.
   */
  readonly transactionStatus?:
    | TransactionStatusFilter
    | undefined;
  /**
   * Flag to request the transaction's receipt.
   *
   * Defaults to `false`.
   */
  readonly includeReceipt?:
    | boolean
    | undefined;
  /**
   * Flag to request the transaction's events.
   *
   * Defaults to `false`.
   */
  readonly includeEvents?:
    | boolean
    | undefined;
  /**
   * Flag to request the transaction's messages to L1.
   *
   * Defaults to `false`.
   */
  readonly includeMessages?: boolean | undefined;
  readonly inner?:
    | { readonly $case: "invokeV0"; readonly invokeV0: InvokeTransactionV0Filter }
    | { readonly $case: "invokeV1"; readonly invokeV1: InvokeTransactionV1Filter }
    | { readonly $case: "invokeV3"; readonly invokeV3: InvokeTransactionV3Filter }
    | { readonly $case: "deploy"; readonly deploy: DeployTransactionFilter }
    | { readonly $case: "declareV0"; readonly declareV0: DeclareV0TransactionFilter }
    | { readonly $case: "declareV1"; readonly declareV1: DeclareV1TransactionFilter }
    | { readonly $case: "declareV2"; readonly declareV2: DeclareV2TransactionFilter }
    | { readonly $case: "declareV3"; readonly declareV3: DeclareV3TransactionFilter }
    | { readonly $case: "l1Handler"; readonly l1Handler: L1HandlerTransactionFilter }
    | { readonly $case: "deployAccountV1"; readonly deployAccountV1: DeployAccountV1TransactionFilter }
    | { readonly $case: "deployAccountV3"; readonly deployAccountV3: DeployAccountV3TransactionFilter }
    | undefined;
}

export interface InvokeTransactionV0Filter {
}

export interface InvokeTransactionV1Filter {
}

export interface InvokeTransactionV3Filter {
}

export interface DeployTransactionFilter {
}

export interface DeclareV0TransactionFilter {
}

export interface DeclareV1TransactionFilter {
}

export interface DeclareV2TransactionFilter {
}

export interface DeclareV3TransactionFilter {
}

export interface L1HandlerTransactionFilter {
}

export interface DeployAccountV1TransactionFilter {
}

export interface DeployAccountV3TransactionFilter {
}

function createBaseFilter(): Filter {
  return { header: undefined, transactions: [], events: [], messages: [] };
}

export const Filter = {
  encode(message: Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      HeaderFilter.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    if (message.transactions !== undefined && message.transactions.length !== 0) {
      for (const v of message.transactions) {
        TransactionFilter.encode(v!, writer.uint32(18).fork()).ldelim();
      }
    }
    if (message.events !== undefined && message.events.length !== 0) {
      for (const v of message.events) {
        EventFilter.encode(v!, writer.uint32(26).fork()).ldelim();
      }
    }
    if (message.messages !== undefined && message.messages.length !== 0) {
      for (const v of message.messages) {
        MessageToL1Filter.encode(v!, writer.uint32(34).fork()).ldelim();
      }
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = HeaderFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transactions!.push(TransactionFilter.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.events!.push(EventFilter.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.messages!.push(MessageToL1Filter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filter {
    return {
      header: isSet(object.header) ? HeaderFilter.fromJSON(object.header) : undefined,
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => TransactionFilter.fromJSON(e))
        : [],
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => EventFilter.fromJSON(e)) : [],
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => MessageToL1Filter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Filter): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = HeaderFilter.toJSON(message.header);
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => TransactionFilter.toJSON(e));
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => EventFilter.toJSON(e));
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => MessageToL1Filter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Filter>): Filter {
    return Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Filter>): Filter {
    const message = createBaseFilter() as any;
    message.header = (object.header !== undefined && object.header !== null)
      ? HeaderFilter.fromPartial(object.header)
      : undefined;
    message.transactions = object.transactions?.map((e) => TransactionFilter.fromPartial(e)) || [];
    message.events = object.events?.map((e) => EventFilter.fromPartial(e)) || [];
    message.messages = object.messages?.map((e) => MessageToL1Filter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHeaderFilter(): HeaderFilter {
  return { always: undefined };
}

export const HeaderFilter = {
  encode(message: HeaderFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.always !== undefined) {
      writer.uint32(8).bool(message.always);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HeaderFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.always = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderFilter {
    return { always: isSet(object.always) ? globalThis.Boolean(object.always) : undefined };
  },

  toJSON(message: HeaderFilter): unknown {
    const obj: any = {};
    if (message.always !== undefined) {
      obj.always = message.always;
    }
    return obj;
  },

  create(base?: DeepPartial<HeaderFilter>): HeaderFilter {
    return HeaderFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HeaderFilter>): HeaderFilter {
    const message = createBaseHeaderFilter() as any;
    message.always = object.always ?? undefined;
    return message;
  },
};

function createBaseEventFilter(): EventFilter {
  return {
    id: 0,
    address: undefined,
    keys: [],
    strict: undefined,
    transactionStatus: undefined,
    includeTransaction: undefined,
    includeReceipt: undefined,
    includeMessages: undefined,
    includeSiblings: undefined,
  };
}

export const EventFilter = {
  encode(message: EventFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.address !== undefined) {
      FieldElement.encode(message.address, writer.uint32(18).fork()).ldelim();
    }
    if (message.keys !== undefined && message.keys.length !== 0) {
      for (const v of message.keys) {
        Key.encode(v!, writer.uint32(26).fork()).ldelim();
      }
    }
    if (message.strict !== undefined) {
      writer.uint32(32).bool(message.strict);
    }
    if (message.transactionStatus !== undefined) {
      writer.uint32(40).int32(message.transactionStatus);
    }
    if (message.includeTransaction !== undefined) {
      writer.uint32(48).bool(message.includeTransaction);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(56).bool(message.includeReceipt);
    }
    if (message.includeMessages !== undefined) {
      writer.uint32(64).bool(message.includeMessages);
    }
    if (message.includeSiblings !== undefined) {
      writer.uint32(72).bool(message.includeSiblings);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = FieldElement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keys!.push(Key.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.strict = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.transactionStatus = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeTransaction = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.includeMessages = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.includeSiblings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventFilter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      address: isSet(object.address) ? FieldElement.fromJSON(object.address) : undefined,
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => Key.fromJSON(e)) : [],
      strict: isSet(object.strict) ? globalThis.Boolean(object.strict) : undefined,
      transactionStatus: isSet(object.transactionStatus)
        ? transactionStatusFilterFromJSON(object.transactionStatus)
        : undefined,
      includeTransaction: isSet(object.includeTransaction) ? globalThis.Boolean(object.includeTransaction) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
      includeMessages: isSet(object.includeMessages) ? globalThis.Boolean(object.includeMessages) : undefined,
      includeSiblings: isSet(object.includeSiblings) ? globalThis.Boolean(object.includeSiblings) : undefined,
    };
  },

  toJSON(message: EventFilter): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.address !== undefined) {
      obj.address = FieldElement.toJSON(message.address);
    }
    if (message.keys?.length) {
      obj.keys = message.keys.map((e) => Key.toJSON(e));
    }
    if (message.strict !== undefined) {
      obj.strict = message.strict;
    }
    if (message.transactionStatus !== undefined) {
      obj.transactionStatus = transactionStatusFilterToJSON(message.transactionStatus);
    }
    if (message.includeTransaction !== undefined) {
      obj.includeTransaction = message.includeTransaction;
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    if (message.includeMessages !== undefined) {
      obj.includeMessages = message.includeMessages;
    }
    if (message.includeSiblings !== undefined) {
      obj.includeSiblings = message.includeSiblings;
    }
    return obj;
  },

  create(base?: DeepPartial<EventFilter>): EventFilter {
    return EventFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventFilter>): EventFilter {
    const message = createBaseEventFilter() as any;
    message.id = object.id ?? 0;
    message.address = (object.address !== undefined && object.address !== null)
      ? FieldElement.fromPartial(object.address)
      : undefined;
    message.keys = object.keys?.map((e) => Key.fromPartial(e)) || [];
    message.strict = object.strict ?? undefined;
    message.transactionStatus = object.transactionStatus ?? undefined;
    message.includeTransaction = object.includeTransaction ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    message.includeMessages = object.includeMessages ?? undefined;
    message.includeSiblings = object.includeSiblings ?? undefined;
    return message;
  },
};

function createBaseKey(): Key {
  return { value: undefined };
}

export const Key = {
  encode(message: Key, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== undefined) {
      FieldElement.encode(message.value, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Key {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKey() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = FieldElement.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Key {
    return { value: isSet(object.value) ? FieldElement.fromJSON(object.value) : undefined };
  },

  toJSON(message: Key): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = FieldElement.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Key>): Key {
    return Key.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Key>): Key {
    const message = createBaseKey() as any;
    message.value = (object.value !== undefined && object.value !== null)
      ? FieldElement.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMessageToL1Filter(): MessageToL1Filter {
  return {
    id: 0,
    fromAddress: undefined,
    toAddress: undefined,
    transactionStatus: undefined,
    includeTransaction: undefined,
    includeReceipt: undefined,
    includeEvents: undefined,
    includeSiblings: undefined,
  };
}

export const MessageToL1Filter = {
  encode(message: MessageToL1Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.fromAddress !== undefined) {
      FieldElement.encode(message.fromAddress, writer.uint32(18).fork()).ldelim();
    }
    if (message.toAddress !== undefined) {
      FieldElement.encode(message.toAddress, writer.uint32(26).fork()).ldelim();
    }
    if (message.transactionStatus !== undefined) {
      writer.uint32(32).int32(message.transactionStatus);
    }
    if (message.includeTransaction !== undefined) {
      writer.uint32(40).bool(message.includeTransaction);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(48).bool(message.includeReceipt);
    }
    if (message.includeEvents !== undefined) {
      writer.uint32(56).bool(message.includeEvents);
    }
    if (message.includeSiblings !== undefined) {
      writer.uint32(64).bool(message.includeSiblings);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MessageToL1Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageToL1Filter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fromAddress = FieldElement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.toAddress = FieldElement.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.transactionStatus = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeTransaction = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeEvents = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.includeSiblings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageToL1Filter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      fromAddress: isSet(object.fromAddress) ? FieldElement.fromJSON(object.fromAddress) : undefined,
      toAddress: isSet(object.toAddress) ? FieldElement.fromJSON(object.toAddress) : undefined,
      transactionStatus: isSet(object.transactionStatus)
        ? transactionStatusFilterFromJSON(object.transactionStatus)
        : undefined,
      includeTransaction: isSet(object.includeTransaction) ? globalThis.Boolean(object.includeTransaction) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
      includeEvents: isSet(object.includeEvents) ? globalThis.Boolean(object.includeEvents) : undefined,
      includeSiblings: isSet(object.includeSiblings) ? globalThis.Boolean(object.includeSiblings) : undefined,
    };
  },

  toJSON(message: MessageToL1Filter): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.fromAddress !== undefined) {
      obj.fromAddress = FieldElement.toJSON(message.fromAddress);
    }
    if (message.toAddress !== undefined) {
      obj.toAddress = FieldElement.toJSON(message.toAddress);
    }
    if (message.transactionStatus !== undefined) {
      obj.transactionStatus = transactionStatusFilterToJSON(message.transactionStatus);
    }
    if (message.includeTransaction !== undefined) {
      obj.includeTransaction = message.includeTransaction;
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    if (message.includeEvents !== undefined) {
      obj.includeEvents = message.includeEvents;
    }
    if (message.includeSiblings !== undefined) {
      obj.includeSiblings = message.includeSiblings;
    }
    return obj;
  },

  create(base?: DeepPartial<MessageToL1Filter>): MessageToL1Filter {
    return MessageToL1Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageToL1Filter>): MessageToL1Filter {
    const message = createBaseMessageToL1Filter() as any;
    message.id = object.id ?? 0;
    message.fromAddress = (object.fromAddress !== undefined && object.fromAddress !== null)
      ? FieldElement.fromPartial(object.fromAddress)
      : undefined;
    message.toAddress = (object.toAddress !== undefined && object.toAddress !== null)
      ? FieldElement.fromPartial(object.toAddress)
      : undefined;
    message.transactionStatus = object.transactionStatus ?? undefined;
    message.includeTransaction = object.includeTransaction ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    message.includeEvents = object.includeEvents ?? undefined;
    message.includeSiblings = object.includeSiblings ?? undefined;
    return message;
  },
};

function createBaseTransactionFilter(): TransactionFilter {
  return {
    id: 0,
    transactionStatus: undefined,
    includeReceipt: undefined,
    includeEvents: undefined,
    includeMessages: undefined,
    inner: undefined,
  };
}

export const TransactionFilter = {
  encode(message: TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.transactionStatus !== undefined) {
      writer.uint32(16).int32(message.transactionStatus);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(24).bool(message.includeReceipt);
    }
    if (message.includeEvents !== undefined) {
      writer.uint32(32).bool(message.includeEvents);
    }
    if (message.includeMessages !== undefined) {
      writer.uint32(40).bool(message.includeMessages);
    }
    switch (message.inner?.$case) {
      case "invokeV0":
        InvokeTransactionV0Filter.encode(message.inner.invokeV0, writer.uint32(50).fork()).ldelim();
        break;
      case "invokeV1":
        InvokeTransactionV1Filter.encode(message.inner.invokeV1, writer.uint32(58).fork()).ldelim();
        break;
      case "invokeV3":
        InvokeTransactionV3Filter.encode(message.inner.invokeV3, writer.uint32(66).fork()).ldelim();
        break;
      case "deploy":
        DeployTransactionFilter.encode(message.inner.deploy, writer.uint32(74).fork()).ldelim();
        break;
      case "declareV0":
        DeclareV0TransactionFilter.encode(message.inner.declareV0, writer.uint32(82).fork()).ldelim();
        break;
      case "declareV1":
        DeclareV1TransactionFilter.encode(message.inner.declareV1, writer.uint32(90).fork()).ldelim();
        break;
      case "declareV2":
        DeclareV2TransactionFilter.encode(message.inner.declareV2, writer.uint32(98).fork()).ldelim();
        break;
      case "declareV3":
        DeclareV3TransactionFilter.encode(message.inner.declareV3, writer.uint32(106).fork()).ldelim();
        break;
      case "l1Handler":
        L1HandlerTransactionFilter.encode(message.inner.l1Handler, writer.uint32(114).fork()).ldelim();
        break;
      case "deployAccountV1":
        DeployAccountV1TransactionFilter.encode(message.inner.deployAccountV1, writer.uint32(122).fork()).ldelim();
        break;
      case "deployAccountV3":
        DeployAccountV3TransactionFilter.encode(message.inner.deployAccountV3, writer.uint32(130).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.transactionStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeEvents = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeMessages = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.inner = { $case: "invokeV0", invokeV0: InvokeTransactionV0Filter.decode(reader, reader.uint32()) };
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.inner = { $case: "invokeV1", invokeV1: InvokeTransactionV1Filter.decode(reader, reader.uint32()) };
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.inner = { $case: "invokeV3", invokeV3: InvokeTransactionV3Filter.decode(reader, reader.uint32()) };
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.inner = { $case: "deploy", deploy: DeployTransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.inner = { $case: "declareV0", declareV0: DeclareV0TransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.inner = { $case: "declareV1", declareV1: DeclareV1TransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.inner = { $case: "declareV2", declareV2: DeclareV2TransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.inner = { $case: "declareV3", declareV3: DeclareV3TransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.inner = { $case: "l1Handler", l1Handler: L1HandlerTransactionFilter.decode(reader, reader.uint32()) };
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.inner = {
            $case: "deployAccountV1",
            deployAccountV1: DeployAccountV1TransactionFilter.decode(reader, reader.uint32()),
          };
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.inner = {
            $case: "deployAccountV3",
            deployAccountV3: DeployAccountV3TransactionFilter.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionFilter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      transactionStatus: isSet(object.transactionStatus)
        ? transactionStatusFilterFromJSON(object.transactionStatus)
        : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
      includeEvents: isSet(object.includeEvents) ? globalThis.Boolean(object.includeEvents) : undefined,
      includeMessages: isSet(object.includeMessages) ? globalThis.Boolean(object.includeMessages) : undefined,
      inner: isSet(object.invokeV0)
        ? { $case: "invokeV0", invokeV0: InvokeTransactionV0Filter.fromJSON(object.invokeV0) }
        : isSet(object.invokeV1)
        ? { $case: "invokeV1", invokeV1: InvokeTransactionV1Filter.fromJSON(object.invokeV1) }
        : isSet(object.invokeV3)
        ? { $case: "invokeV3", invokeV3: InvokeTransactionV3Filter.fromJSON(object.invokeV3) }
        : isSet(object.deploy)
        ? { $case: "deploy", deploy: DeployTransactionFilter.fromJSON(object.deploy) }
        : isSet(object.declareV0)
        ? { $case: "declareV0", declareV0: DeclareV0TransactionFilter.fromJSON(object.declareV0) }
        : isSet(object.declareV1)
        ? { $case: "declareV1", declareV1: DeclareV1TransactionFilter.fromJSON(object.declareV1) }
        : isSet(object.declareV2)
        ? { $case: "declareV2", declareV2: DeclareV2TransactionFilter.fromJSON(object.declareV2) }
        : isSet(object.declareV3)
        ? { $case: "declareV3", declareV3: DeclareV3TransactionFilter.fromJSON(object.declareV3) }
        : isSet(object.l1Handler)
        ? { $case: "l1Handler", l1Handler: L1HandlerTransactionFilter.fromJSON(object.l1Handler) }
        : isSet(object.deployAccountV1)
        ? {
          $case: "deployAccountV1",
          deployAccountV1: DeployAccountV1TransactionFilter.fromJSON(object.deployAccountV1),
        }
        : isSet(object.deployAccountV3)
        ? {
          $case: "deployAccountV3",
          deployAccountV3: DeployAccountV3TransactionFilter.fromJSON(object.deployAccountV3),
        }
        : undefined,
    };
  },

  toJSON(message: TransactionFilter): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.transactionStatus !== undefined) {
      obj.transactionStatus = transactionStatusFilterToJSON(message.transactionStatus);
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    if (message.includeEvents !== undefined) {
      obj.includeEvents = message.includeEvents;
    }
    if (message.includeMessages !== undefined) {
      obj.includeMessages = message.includeMessages;
    }
    if (message.inner?.$case === "invokeV0") {
      obj.invokeV0 = InvokeTransactionV0Filter.toJSON(message.inner.invokeV0);
    }
    if (message.inner?.$case === "invokeV1") {
      obj.invokeV1 = InvokeTransactionV1Filter.toJSON(message.inner.invokeV1);
    }
    if (message.inner?.$case === "invokeV3") {
      obj.invokeV3 = InvokeTransactionV3Filter.toJSON(message.inner.invokeV3);
    }
    if (message.inner?.$case === "deploy") {
      obj.deploy = DeployTransactionFilter.toJSON(message.inner.deploy);
    }
    if (message.inner?.$case === "declareV0") {
      obj.declareV0 = DeclareV0TransactionFilter.toJSON(message.inner.declareV0);
    }
    if (message.inner?.$case === "declareV1") {
      obj.declareV1 = DeclareV1TransactionFilter.toJSON(message.inner.declareV1);
    }
    if (message.inner?.$case === "declareV2") {
      obj.declareV2 = DeclareV2TransactionFilter.toJSON(message.inner.declareV2);
    }
    if (message.inner?.$case === "declareV3") {
      obj.declareV3 = DeclareV3TransactionFilter.toJSON(message.inner.declareV3);
    }
    if (message.inner?.$case === "l1Handler") {
      obj.l1Handler = L1HandlerTransactionFilter.toJSON(message.inner.l1Handler);
    }
    if (message.inner?.$case === "deployAccountV1") {
      obj.deployAccountV1 = DeployAccountV1TransactionFilter.toJSON(message.inner.deployAccountV1);
    }
    if (message.inner?.$case === "deployAccountV3") {
      obj.deployAccountV3 = DeployAccountV3TransactionFilter.toJSON(message.inner.deployAccountV3);
    }
    return obj;
  },

  create(base?: DeepPartial<TransactionFilter>): TransactionFilter {
    return TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransactionFilter>): TransactionFilter {
    const message = createBaseTransactionFilter() as any;
    message.id = object.id ?? 0;
    message.transactionStatus = object.transactionStatus ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    message.includeEvents = object.includeEvents ?? undefined;
    message.includeMessages = object.includeMessages ?? undefined;
    if (object.inner?.$case === "invokeV0" && object.inner?.invokeV0 !== undefined && object.inner?.invokeV0 !== null) {
      message.inner = { $case: "invokeV0", invokeV0: InvokeTransactionV0Filter.fromPartial(object.inner.invokeV0) };
    }
    if (object.inner?.$case === "invokeV1" && object.inner?.invokeV1 !== undefined && object.inner?.invokeV1 !== null) {
      message.inner = { $case: "invokeV1", invokeV1: InvokeTransactionV1Filter.fromPartial(object.inner.invokeV1) };
    }
    if (object.inner?.$case === "invokeV3" && object.inner?.invokeV3 !== undefined && object.inner?.invokeV3 !== null) {
      message.inner = { $case: "invokeV3", invokeV3: InvokeTransactionV3Filter.fromPartial(object.inner.invokeV3) };
    }
    if (object.inner?.$case === "deploy" && object.inner?.deploy !== undefined && object.inner?.deploy !== null) {
      message.inner = { $case: "deploy", deploy: DeployTransactionFilter.fromPartial(object.inner.deploy) };
    }
    if (
      object.inner?.$case === "declareV0" && object.inner?.declareV0 !== undefined && object.inner?.declareV0 !== null
    ) {
      message.inner = { $case: "declareV0", declareV0: DeclareV0TransactionFilter.fromPartial(object.inner.declareV0) };
    }
    if (
      object.inner?.$case === "declareV1" && object.inner?.declareV1 !== undefined && object.inner?.declareV1 !== null
    ) {
      message.inner = { $case: "declareV1", declareV1: DeclareV1TransactionFilter.fromPartial(object.inner.declareV1) };
    }
    if (
      object.inner?.$case === "declareV2" && object.inner?.declareV2 !== undefined && object.inner?.declareV2 !== null
    ) {
      message.inner = { $case: "declareV2", declareV2: DeclareV2TransactionFilter.fromPartial(object.inner.declareV2) };
    }
    if (
      object.inner?.$case === "declareV3" && object.inner?.declareV3 !== undefined && object.inner?.declareV3 !== null
    ) {
      message.inner = { $case: "declareV3", declareV3: DeclareV3TransactionFilter.fromPartial(object.inner.declareV3) };
    }
    if (
      object.inner?.$case === "l1Handler" && object.inner?.l1Handler !== undefined && object.inner?.l1Handler !== null
    ) {
      message.inner = { $case: "l1Handler", l1Handler: L1HandlerTransactionFilter.fromPartial(object.inner.l1Handler) };
    }
    if (
      object.inner?.$case === "deployAccountV1" &&
      object.inner?.deployAccountV1 !== undefined &&
      object.inner?.deployAccountV1 !== null
    ) {
      message.inner = {
        $case: "deployAccountV1",
        deployAccountV1: DeployAccountV1TransactionFilter.fromPartial(object.inner.deployAccountV1),
      };
    }
    if (
      object.inner?.$case === "deployAccountV3" &&
      object.inner?.deployAccountV3 !== undefined &&
      object.inner?.deployAccountV3 !== null
    ) {
      message.inner = {
        $case: "deployAccountV3",
        deployAccountV3: DeployAccountV3TransactionFilter.fromPartial(object.inner.deployAccountV3),
      };
    }
    return message;
  },
};

function createBaseInvokeTransactionV0Filter(): InvokeTransactionV0Filter {
  return {};
}

export const InvokeTransactionV0Filter = {
  encode(_: InvokeTransactionV0Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InvokeTransactionV0Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvokeTransactionV0Filter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InvokeTransactionV0Filter {
    return {};
  },

  toJSON(_: InvokeTransactionV0Filter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<InvokeTransactionV0Filter>): InvokeTransactionV0Filter {
    return InvokeTransactionV0Filter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<InvokeTransactionV0Filter>): InvokeTransactionV0Filter {
    const message = createBaseInvokeTransactionV0Filter() as any;
    return message;
  },
};

function createBaseInvokeTransactionV1Filter(): InvokeTransactionV1Filter {
  return {};
}

export const InvokeTransactionV1Filter = {
  encode(_: InvokeTransactionV1Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InvokeTransactionV1Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvokeTransactionV1Filter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InvokeTransactionV1Filter {
    return {};
  },

  toJSON(_: InvokeTransactionV1Filter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<InvokeTransactionV1Filter>): InvokeTransactionV1Filter {
    return InvokeTransactionV1Filter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<InvokeTransactionV1Filter>): InvokeTransactionV1Filter {
    const message = createBaseInvokeTransactionV1Filter() as any;
    return message;
  },
};

function createBaseInvokeTransactionV3Filter(): InvokeTransactionV3Filter {
  return {};
}

export const InvokeTransactionV3Filter = {
  encode(_: InvokeTransactionV3Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InvokeTransactionV3Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvokeTransactionV3Filter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InvokeTransactionV3Filter {
    return {};
  },

  toJSON(_: InvokeTransactionV3Filter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<InvokeTransactionV3Filter>): InvokeTransactionV3Filter {
    return InvokeTransactionV3Filter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<InvokeTransactionV3Filter>): InvokeTransactionV3Filter {
    const message = createBaseInvokeTransactionV3Filter() as any;
    return message;
  },
};

function createBaseDeployTransactionFilter(): DeployTransactionFilter {
  return {};
}

export const DeployTransactionFilter = {
  encode(_: DeployTransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeployTransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployTransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployTransactionFilter {
    return {};
  },

  toJSON(_: DeployTransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployTransactionFilter>): DeployTransactionFilter {
    return DeployTransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployTransactionFilter>): DeployTransactionFilter {
    const message = createBaseDeployTransactionFilter() as any;
    return message;
  },
};

function createBaseDeclareV0TransactionFilter(): DeclareV0TransactionFilter {
  return {};
}

export const DeclareV0TransactionFilter = {
  encode(_: DeclareV0TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeclareV0TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclareV0TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeclareV0TransactionFilter {
    return {};
  },

  toJSON(_: DeclareV0TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeclareV0TransactionFilter>): DeclareV0TransactionFilter {
    return DeclareV0TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeclareV0TransactionFilter>): DeclareV0TransactionFilter {
    const message = createBaseDeclareV0TransactionFilter() as any;
    return message;
  },
};

function createBaseDeclareV1TransactionFilter(): DeclareV1TransactionFilter {
  return {};
}

export const DeclareV1TransactionFilter = {
  encode(_: DeclareV1TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeclareV1TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclareV1TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeclareV1TransactionFilter {
    return {};
  },

  toJSON(_: DeclareV1TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeclareV1TransactionFilter>): DeclareV1TransactionFilter {
    return DeclareV1TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeclareV1TransactionFilter>): DeclareV1TransactionFilter {
    const message = createBaseDeclareV1TransactionFilter() as any;
    return message;
  },
};

function createBaseDeclareV2TransactionFilter(): DeclareV2TransactionFilter {
  return {};
}

export const DeclareV2TransactionFilter = {
  encode(_: DeclareV2TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeclareV2TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclareV2TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeclareV2TransactionFilter {
    return {};
  },

  toJSON(_: DeclareV2TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeclareV2TransactionFilter>): DeclareV2TransactionFilter {
    return DeclareV2TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeclareV2TransactionFilter>): DeclareV2TransactionFilter {
    const message = createBaseDeclareV2TransactionFilter() as any;
    return message;
  },
};

function createBaseDeclareV3TransactionFilter(): DeclareV3TransactionFilter {
  return {};
}

export const DeclareV3TransactionFilter = {
  encode(_: DeclareV3TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeclareV3TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclareV3TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeclareV3TransactionFilter {
    return {};
  },

  toJSON(_: DeclareV3TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeclareV3TransactionFilter>): DeclareV3TransactionFilter {
    return DeclareV3TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeclareV3TransactionFilter>): DeclareV3TransactionFilter {
    const message = createBaseDeclareV3TransactionFilter() as any;
    return message;
  },
};

function createBaseL1HandlerTransactionFilter(): L1HandlerTransactionFilter {
  return {};
}

export const L1HandlerTransactionFilter = {
  encode(_: L1HandlerTransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): L1HandlerTransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseL1HandlerTransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): L1HandlerTransactionFilter {
    return {};
  },

  toJSON(_: L1HandlerTransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<L1HandlerTransactionFilter>): L1HandlerTransactionFilter {
    return L1HandlerTransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<L1HandlerTransactionFilter>): L1HandlerTransactionFilter {
    const message = createBaseL1HandlerTransactionFilter() as any;
    return message;
  },
};

function createBaseDeployAccountV1TransactionFilter(): DeployAccountV1TransactionFilter {
  return {};
}

export const DeployAccountV1TransactionFilter = {
  encode(_: DeployAccountV1TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeployAccountV1TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployAccountV1TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployAccountV1TransactionFilter {
    return {};
  },

  toJSON(_: DeployAccountV1TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployAccountV1TransactionFilter>): DeployAccountV1TransactionFilter {
    return DeployAccountV1TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployAccountV1TransactionFilter>): DeployAccountV1TransactionFilter {
    const message = createBaseDeployAccountV1TransactionFilter() as any;
    return message;
  },
};

function createBaseDeployAccountV3TransactionFilter(): DeployAccountV3TransactionFilter {
  return {};
}

export const DeployAccountV3TransactionFilter = {
  encode(_: DeployAccountV3TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeployAccountV3TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployAccountV3TransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployAccountV3TransactionFilter {
    return {};
  },

  toJSON(_: DeployAccountV3TransactionFilter): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployAccountV3TransactionFilter>): DeployAccountV3TransactionFilter {
    return DeployAccountV3TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployAccountV3TransactionFilter>): DeployAccountV3TransactionFilter {
    const message = createBaseDeployAccountV3TransactionFilter() as any;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
