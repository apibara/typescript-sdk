// Apibara StarkNet Support
syntax = "proto3";

package apibara.starknet.v1alpha2;

import "google/protobuf/timestamp.proto";
import "types.proto";

// A StarkNet block.
message Block {
  // Block status.
  BlockStatus status = 1;
  // Block header.
  BlockHeader header = 2;
  // Transactions in the block.
  repeated TransactionWithReceipt transactions = 3;
  // State update caused by the block.
  StateUpdate state_update = 4;
  // Events emitted in the block.
  repeated EventWithTransaction events = 5;
  // Messages to L1 sent in the block.
  repeated L2ToL1MessageWithTransaction l2_to_l1_messages = 6;
}

// Block header.
message BlockHeader {
  // Hash of the block.
  FieldElement block_hash = 1;
  // Hash of the block's parent.
  FieldElement parent_block_hash = 2;
  // Block height.
  uint64 block_number = 3;
  // Sequencer address.
  FieldElement sequencer_address = 4;
  // New state root after the block.
  FieldElement new_root = 5;
  // Timestamp when block  was produced.
  google.protobuf.Timestamp timestamp = 6;
}

// Status of a block.
enum BlockStatus {
  // Unknown block status.
  BLOCK_STATUS_UNSPECIFIED = 0;
  // Block not accepted yet.
  BLOCK_STATUS_PENDING = 1;
  // Block accepted on L2.
  BLOCK_STATUS_ACCEPTED_ON_L2 = 2;
  // Block finalized on L1.
  BLOCK_STATUS_ACCEPTED_ON_L1 = 3;
  // Block was rejected and is not part of the canonical chain anymore.
  BLOCK_STATUS_REJECTED = 4;
}

// A transaction with its receipt.
message TransactionWithReceipt {
  // The transaction
  Transaction transaction = 1;
  // The transaction receipt.
  TransactionReceipt receipt = 2;
}

// A transaction.
message Transaction {
  // Common transaction metadata.
  TransactionMeta meta = 1;
  oneof transaction {
    // Transaction invoking a smart contract, V0.
    InvokeTransactionV0 invoke_v0 = 2;
    // Transaction invoking a smart contract, V1.
    InvokeTransactionV1 invoke_v1 = 3;
    // Transaction deploying a new smart contract.
    DeployTransaction deploy = 4;
    // Transaction declaring a smart contract.
    DeclareTransaction declare = 5;
    // Transaction handling a message from L1.
    L1HandlerTransaction l1_handler = 6;
    // Transaction deploying a new account.
    DeployAccountTransaction deploy_account = 7;
  }
}

// Common transaction metadata.
message TransactionMeta {
  // Transaction hash.
  FieldElement hash = 1;
  // Maximum fee to be paid.
  FieldElement max_fee = 2;
  // Signature by the user.
  repeated FieldElement signature = 3;
  // Nonce.
  FieldElement nonce = 4;
  // Version.
  uint64 version = 5;
}

// Transaction invoking a smart contract, V0.
message InvokeTransactionV0 {
  // Target contract address.
  FieldElement contract_address = 1;
  // Selector of the function being invoked.
  FieldElement entry_point_selector = 2;
  // Raw calldata.
  repeated FieldElement calldata = 3;
}

// Transaction invoking a smart contract, V1.
message InvokeTransactionV1 {
  // Address sending the transaction.
  FieldElement sender_address = 1;
  // Raw calldata.
  repeated FieldElement calldata = 2;
}

// Transaction deploying a new smart contract.
message DeployTransaction {
  // Raw calldata passed to the constructor.
  repeated FieldElement constructor_calldata = 2;
  // Salt used when computing the contract's address.
  FieldElement contract_address_salt = 3;
  // Hash of the class being deployed.
  FieldElement class_hash = 4;
}

// Transaction declaring a smart contract.
message DeclareTransaction {
  // Class hash.
  FieldElement class_hash = 1;
  // Address of the account declaring the class.
  FieldElement sender_address = 2;
}

// Transaction handling a message from L1.
message L1HandlerTransaction {
  // Target contract address.
  FieldElement contract_address = 2;
  // Selector of the function being invoked.
  FieldElement entry_point_selector = 3;
  // Raw calldata.
  repeated FieldElement calldata = 4;
}

// Transaction deploying a new account.
message DeployAccountTransaction {
  // Raw calldata passed to the constructor.
  repeated FieldElement constructor_calldata = 2;
  // Salt used when computing the contract's address.
  FieldElement contract_address_salt = 3;
  // Hash of the class being deployed.
  FieldElement class_hash = 4;
}

// Result of the execution of a transaction.
// 
// This message only contains the receipt data, if you also need the
// transaction, request a `Transaction`.
message TransactionReceipt {
  // Hash of the transaction.
  FieldElement transaction_hash = 1;
  // Transaction's indexe in the list of transactions in a block.
  uint64 transaction_index = 2;
  // Feed paid.
  FieldElement actual_fee = 3;
  // Messages sent to L1 in the transactions.
  repeated L2ToL1Message l2_to_l1_messages = 4;
  // Events emitted in the transaction.
  repeated Event events = 5;
}

// Message sent from L2 to L1 together with its transaction and receipt.
message L2ToL1MessageWithTransaction {
  // The transaction that sent this message.
  Transaction transaction = 1;
  // The transaction receipt.
  TransactionReceipt receipt = 2;
  // The message.
  L2ToL1Message message = 3;
}

// Message sent from L2 to L1.
message L2ToL1Message {
  // Destination address.
  FieldElement to_address = 3;
  // Data contained in the message.
  repeated FieldElement payload = 4;
}

// Event emitted by a transaction, together with its transaction and receipt.
message EventWithTransaction {
  // The transaction emitting the event.
  Transaction transaction = 1;
  // The transaction receipt.
  TransactionReceipt receipt = 2;
  // The event.
  Event event = 3;
}

// Event emitted by a transaction.
message Event {
  // Address of the smart contract emitting the event.
  FieldElement from_address = 1;
  // Event key.
  repeated FieldElement keys = 2;
  // Event data.
  repeated FieldElement data = 3;
}

// State update.
message StateUpdate {
  // New state root.
  FieldElement new_root = 1;
  // Previous state root.
  FieldElement old_root = 2;
  // State difference.
  StateDiff state_diff = 3;
}

// Difference in state between blocks.
message StateDiff {
  // Storage differences.
  repeated StorageDiff storage_diffs = 1;
  // Contracts declared.
  repeated DeclaredContract declared_contracts = 2;
  // Contracts deployed.
  repeated DeployedContract deployed_contracts = 3;
  // Nonces updated.
  repeated NonceUpdate nonces = 4;
}

// Difference in storage values for a contract.
message StorageDiff {
  // The contract address.
  FieldElement contract_address = 1;
  // Entries that changed.
  repeated StorageEntry storage_entries = 2;
}

// Storage entry.
message StorageEntry {
  // Storage location.
  FieldElement key = 1;
  // Storage value.
  FieldElement value = 2;
}

// Contract declared.
message DeclaredContract {
  // Class hash of the newly declared contract.
  FieldElement class_hash = 1;
}

// Contract deployed.
message DeployedContract {
  // Address of the newly deployed contract.
  FieldElement contract_address = 1;
  // Class hash of the deployed contract.
  FieldElement class_hash = 2;
}

// Nonce update.
message NonceUpdate {
  // Contract address.
  FieldElement contract_address = 1;
  // New nonce value.
  FieldElement nonce = 2;
}